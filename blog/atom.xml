<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Erudika Blog]]></title>
  
  <link href="/blog/atom.xml" rel="self"/>
  <link href="http://www.erudika.com/blog/"/>
  <updated>2016-01-05T21:09:13.363Z</updated>
  <id>http://www.erudika.com/blog/</id>
  
  <author>
    <name><![CDATA[Alexander B.]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Para v1.17 released]]></title>
    <link href="http://www.erudika.com/blog/2016/01/05/para-1-17-released/"/>
    <id>http://www.erudika.com/blog/2016/01/05/para-1-17-released/</id>
    <published>2016-01-05T16:20:27.000Z</published>
    <updated>2016-01-05T21:09:13.363Z</updated>
    <content type="html"><![CDATA[<p>We’re happy to announce the release of Para v1.17. Last week we pushed the new version to Maven and now it’s also
deployed on <a href="https://paraio.com" target="_blank" rel="external">ParaIO.com</a>, our hosted backend service.</p>
<a id="more"></a>
<p>We’ve worked hard during the holidays to bring you several new features that will enable you to integrate Para in
projects that are client-side only like static web pages or mobile applications.</p>
<p>Here are all the new features in Para v1.17:</p>
<!--
Added JSON Web Tokens support
Added methods to grant and revoke permissions for users
Fixed Maven's JAR and WAR assembly - there's a single 'fat' executable WAR now
Updated Elasticsearch to v2.1.1
Updated design & added features to web console
-->
<h2 id="JSON_Web_Tokens_(JWT)_support">JSON Web Tokens (JWT) support</h2><p><img src="/assets/img/blogpost_media2.png" alt=""></p>
<p><a href="http://jwt.io/" target="_blank" rel="external">JSON Web Tokens</a> are a new standard for signing and authenticating clients and users. Think of them as
Cookies 2.0. They are simply a signed JSON object containing some data about the authenticated user. The cool thing about
JWTs is that they are stateless and can be stored anywhere - cookies, local storage, memory, etc. They can securely
store information and claims about the user and that information is signed and cannot be tampered with.</p>
<p>Originally, Para supported only cookies and allowed users to sign in only to the server running Para.
This was quite limiting. Now with JWTs users can be authenticated and created per app
(see <a href="http://www.paraio.org/docs/#011-apps" target="_blank" rel="external">the docs for apps</a>) through the API.
Cookies are still supported but using web tokens is recommended. For example, to sign in a user with
Facebook you have to make a request like this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /v1/jwt_auth</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"appid"</span>: <span class="string">"app:myapp"</span>,</span><br><span class="line">  <span class="string">"provider"</span>: <span class="string">"facebook"</span>,</span><br><span class="line">  <span class="string">"token"</span>: <span class="string">"eyJhbGciOiJIUzI1NiJ9.eWIiO..."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The token above is a Facebook access token which is exchanged for a Para access token in the form of JWT.
If that request succeeds, the access token for Para is returned and that user is now authenticated with <code>app:myapp</code>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"jwt"</span>: &#123;</span><br><span class="line">    <span class="string">"access_token"</span>: <span class="string">"eyJhbGciOiJIUzI1NiJ9.eyJ..."</span>,</span><br><span class="line">    <span class="string">"expires"</span>: <span class="number">1450137214490</span>,</span><br><span class="line">    <span class="string">"refresh"</span>: <span class="number">1450137216490</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"user"</span>: &#123;</span><br><span class="line">    <span class="string">"id"</span>:<span class="string">"user1"</span>,</span><br><span class="line">    <span class="string">"timestamp"</span>: <span class="number">1399721289987</span>,</span><br><span class="line">    <span class="string">"type"</span>:<span class="string">"user"</span>,</span><br><span class="line">    <span class="string">"appid"</span>:<span class="string">"myapp"</span>,</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>That’s it - there’s no need to register the user. And this request can come from any client not just the backend.
An good use case would be an AngularJS app running on its own as a static single page app. The frontend code would use
our JavaScript client library to call <code>signIn()</code> to the Para backend server. Another use case could be a mobile app
running native Android code. The app’s code, even though compiled, is not trusted and thus must not contain any
API access credentials like a <code>secret_key</code> for Para. In this case JWT is ideal because it gives that app (untrusted client)
temporary access to the API. Para access tokens are valid for one week, by default.</p>
<p>Special thanks to the guys at <a href="http://connect2id.com/products/nimbus-jose-jwt" target="_blank" rel="external">Connect2ID</a> for their excellent JWT
library for Java which we use in Para.</p>
<h2 id="Resource_permissions">Resource permissions</h2><p>Soon after we decided to add JWT support, we realized that once a user has been authenticated with an app we need to
specify what that user can do, so we implemented basic resource permissions. By default users are not trusted and every
new app has zero permissions - the default policy is <code>deny all</code>. This is in contrast to the normal API access using a
<code>secret_key</code> for apps, in which case apps have full permissions and privileged access.</p>
<p>Resource permissions affect only users with JWT tokens and are stored in each app object. A permission has three parts -
a <code>subject_id</code>, a <code>resource_name</code> and a list of <code>methods</code>. It looks like this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"user2"</span>: &#123;</span><br><span class="line">    <span class="string">"posts"</span>: [<span class="string">"GET"</span>, <span class="string">"POST"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This gives a subject with id <code>user2</code> permissions to access resource <code>posts</code> using HTTP methods <code>GET</code> and <code>POST</code> only.
The <code>posts</code> resource is just an example an is part of the API and is located at <code>/v1/posts</code>. Wildcards <code>*</code> are also
supported. So the following permission would give everyone full access to all resources for a given app:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"*"</span>: &#123;</span><br><span class="line">    <span class="string">"*"</span>: [<span class="string">"*"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Permissions can be granted and revoked through the API. There’s also a method for checking permissions:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /v1/_permissions/&#123;subjectid&#125;/&#123;resource&#125;/&#123;method&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Support_for_Elasticsearch_2-x">Support for Elasticsearch 2.x</h2><p>Elasticseach is a key component of the Para backend server and we use it since version 0.13. With version 2.0 come many
new features and changes. We’ve modified and tested the code to be compatible with the new version.</p>
<p>You can <a href="https://github.com/Erudika/para/releases/download/v1.17.1/para-war-1.17.1.war" target="_blank" rel="external">download the latest WAR file from GitHub</a>.
To run it just type <code>java -jar para-war.war</code> and it will start.</p>
<p><strong> We hope you will like the new features and feel free to try Para online at <a href="https://paraio.com" target="_blank" rel="external">paraio.com</a>.
No need to install anything and it’s free.</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>We’re happy to announce the release of Para v1.17. Last week we pushed the new version to Maven and now it’s also
deployed on <a href="https://paraio.com">ParaIO.com</a>, our hosted backend service.</p>]]>
    
    </summary>
    
      <category term="backend" scheme="http://www.erudika.com/blog/tags/backend/"/>
    
      <category term="para" scheme="http://www.erudika.com/blog/tags/para/"/>
    
      <category term="release" scheme="http://www.erudika.com/blog/tags/release/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Modern backend (BaaS) frameworks - an overview of Usergrid, LoopBack, Para, BaasBox, Deployd and Telepat]]></title>
    <link href="http://www.erudika.com/blog/2015/10/21/backend-frameworks-usergrid-loopback-para-baasbox-deployd-telepat/"/>
    <id>http://www.erudika.com/blog/2015/10/21/backend-frameworks-usergrid-loopback-para-baasbox-deployd-telepat/</id>
    <published>2015-10-21T11:17:19.000Z</published>
    <updated>2016-01-05T16:24:22.116Z</updated>
    <content type="html"><![CDATA[<p>Let’s have a look at some modern open source backend frameworks that are available today. These frameworks act as your server-side component of your website or app. Developers use them to build and iterate on products faster than ever before by focusing on the “fun” part - the frontend (client-side).</p>
<a id="more"></a>
<p>The communication between your front-end code and the backend is usually done through HTTP(S) and the data is usually in the form of JSON objects that are sent back and forth. The details about the whole process should be well documented and part of the REST API documentation.</p>
<p>So why use a backend framework instead of writing my own? The main good reason is that these frameworks are packaged as reusable components and are tried and tested by many developers. So instead of maintaining another piece of code - the one you wrote yourself - you can use a package that’s already out there and maintained for you.</p>
<p>Some BaaS frameworks are designed with focus on mobile app development (mBaaS) and some are more generic for building anything from websites to desktop software or games. The ones that target mobile apps usually have features like realtime push, notifications support and client libraries for Android and iOS. We’ll cover both types of frameworks here.</p>
<h2 id="UserGrid"><a href="http://usergrid.apache.org" target="_blank" rel="external">UserGrid</a> <a href="https://github.com/apache/usergrid" target="_blank" rel="external"><i class="fa fa-github-square"></i></a></h2><p><img src="/assets/img/usergrid.png">
<strong>Multitenant:</strong> yes
<strong>Language:</strong> Java
<strong>Database:</strong> Cassandra
<strong>Documentation:</strong> 9/10
<strong>Client libraries:</strong> Android, iOS, JavaScript, Ruby, Java, .NET, PHP</p>
<p>Usergrid is an Apache backend-as-a-service project built with Java. It’s been around since 2011 and is actively developed and maintained. The new version 2.0 is yet to be released and will require both Cassandra and Elasticsearch in addition to a queue system like AWS SQS.</p>
<p>The project is very well documented but getting started involves quite a few steps. First you need to install Cassandra and a servlet container like Tomcat. Then you deploy the WAR file to Tomcat and call a special URL to create a superuser account which gives you access to the web-based console.</p>
<p>The API allows you to create and run multiple apps, which is a good thing because you might want to have a couple of apps sharing the same backend and this also makes deployment easier. You also get all the basic CRUD functionality for working with collections and entities (JSON objects). There are several built-in entity types like <code>user</code>, <code>group</code> and <code>application</code>, for example. They all have <code>type</code> and <code>uuid</code> properties and the latter is an actual UUID string. Basic entity relationships are also supported. Usergrid has good support for user and file management and has a simple data model.</p>
<p>Authentication is implemented through OAuth 2.0 and it makes a distinction between user and app roles. Social login is supported but it appears that only Facebook login works out-of-the-box. Other extra features include geolocation queries and push notifications (in v2.0).</p>
<p>Usergrid is an excellent choice if you are building a mobile application or an enterprise-grade backend service in your organization. It is used in production by quite a few companies.</p>
<h2 id="LoopBack"><a href="http://loopback.io" target="_blank" rel="external">LoopBack</a> <a href="https://github.com/strongloop/loopback" target="_blank" rel="external"><i class="fa fa-github-square"></i></a></h2><p><img src="/assets/img/loopback.png">
<strong>Multitenant:</strong> no
<strong>Language:</strong> JavaScript
<strong>Database:</strong> agnostic
<strong>Documentation:</strong> 9/10
<strong>Client libraries:</strong> Android/Java, iOS, JavaScript</p>
<p>LoopBack is a Node.js API framework by StrongLoop, part of IBM. It’s been around since 2013 and is actively developed and has great commercial support. It is focused on REST API development and provides a visual editor for editing and deploying apps. Mobile app developers will love the Android and iOS SDKs and the push system.</p>
<p>The developer docs are extensive and clear but sometimes slow to navigate. Getting started is easy and there’s a Yeaoman-based scaffolding tool for generating new project skeletons. Developers have a great choice of database connectors for all major SQL databases and MongoDB. For development you can also use an in-memory db.</p>
<p>The flexibility of JavaScript is great for quickly developing apps with less boilerplate code. LoopBack helps with that further by providing a handy model generator for building your classes quickly. These can be validated with the built-in validation methods. Entity relationships are very well supported. The security model is complex with user roles, principals and ACLs.</p>
<p>Basic user authentication is part of the core and third-party login support can be implemented using Passport modules. There’s also a module for OAuth. Geolocation, push and file services are built-in. For anything else there’s <code>npm</code> and tons of modules on GitHub.</p>
<p>LoopBack is great for REST API service generation and very rapid prototyping. Developers can get up and running in minutes by building a custom API using the given CLI tool. LoopBack is a very good fit for all projects written in JavaScript.</p>
<h2 id="Para"><a href="https://paraio.org" target="_blank" rel="external">Para</a> <a href="https://github.com/Erudika/para" target="_blank" rel="external"><i class="fa fa-github-square"></i></a></h2><p><img src="/assets/img/paraio.png" style="border: 1px solid #CCCCCC">
<strong>Multitenant:</strong> yes
<strong>Language:</strong> Java
<strong>Database:</strong> agnostic
<strong>Documentation:</strong> 9/10
<strong>Client libraries:</strong> Java, JavaScript, .NET, PHP</p>
<p>Para is our own little backend framework. It is powered by Java and was released in early 2014. Para integrates well with Elasticsearch and DynamoDB and Hazelcast but developers are not limited to using these defaults. The design is flexible enough so that anyone can implement the provided interfaces for search, persistence and caching functionality. We have plans to include connectors for MongoDB and Cassandra soon.</p>
<p>Para is focused on simplicity and flexibility and it can host multiple apps on a single server. Although you can use it to power your mobile backend, we wanted to make the framework simpler by providing the core functionality and thus we created a general-purpose BaaS. Already there are plenty of mobile-centric platforms out there (Parse, Pusher, etc.) that provide realtime and push services.</p>
<p>The documentation is great, contained in a single webpage for easy navigation and API methods are described clearly. Getting started is pretty easy - download one JAR file and execute it. Then run the initial setup:
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl localhost:<span class="number">8080</span>/v1/_setup</span><br></pre></td></tr></table></figure></p>
<p>This will give you the keys needed for making authenticated requests to the server using any of our API clients. If you wish to integrate Para with your own code, there’s a package on Maven central - just search for <code>para-server</code>. A WAR file is also available for those who need to run Para inside a container.</p>
<p>The core API consists of three main interfaces for searching, storing and caching object. Implement those and you have your own custom server. The data model is simple and all classes implement the <code>ParaObject</code> interface. This gives them some basic properties like <code>id</code>, <code>type</code> and <code>name</code>. Entities can link to other entities by forming one-to-one, one-to-many and many-to-many relationships. Basic constraint checkers, such as <code>required</code>, <code>min</code>, <code>max</code>, <code>regexp</code>, can be used to validate object properties. Full-text search is enabled by default for all objects.</p>
<p>Authentication between clients and the server is not based on OAuth, <a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/" target="_blank" rel="external">intentionally</a>. Instead we implement the simple and robust AWS Signature 4 algorithm for signed requests. Better user management and support for JSON Web Tokens will be available in the next version 1.17, soon. Para has built-in support for third-party authentication with Facebook, Twitter, Google+, GitHub and LinkedIn.</p>
<p>Para is a good choice if you are building a cloud-based web service or website and is great for rapid prototyping. It’s an easy-to-use and flexible platform that scales well. A backend for busy developers.</p>
<h2 id="BaasBox"><a href="http://www.baasbox.com" target="_blank" rel="external">BaasBox</a> <a href="https://github.com/baasbox/baasbox" target="_blank" rel="external"><i class="fa fa-github-square"></i></a></h2><p><img src="/assets/img/baasbox.png">
<strong>Multitenant:</strong> yes, <a href="http://www.baasbox.com/the-importance-of-managing-multiple-apps-with-one-backend" target="_blank" rel="external">since v0.8.4</a>
<strong>Language:</strong> Java
<strong>Database:</strong> OrientDB
<strong>Documentation:</strong> 9/10
<strong>Client libraries:</strong> Android/Java, iOS, JavaScript</p>
<p>BaasBox is another mBaaS with a nice web-based admin console. It supports everything a mobile developer would need to run a backend server. It’s been around since early 2013. It provides good support for Android and iOS clients and JavaScript.</p>
<p>The docs are very nice and detailed, very easy to navigate. Getting started is very easy - unzip the file and run the Bash/bat script and you open up the console on <code>localhost:9000/console</code>.  The server is running on top of OrientDB which is sort of a hybrid database and has a lot of cool features.</p>
<p>BaasBox is easy to learn and has a nice REST API that speaks JSON. It’s got full support for CRUD operations on objects and collections of objects and also allows you to link them in one-to-many or many-to-many relationships. Social features are excellent - you have social login, friendship/followers API and user management. Other features include files and assets API, push notifications and a plugin system.</p>
<p>BaasBox is a good choice as a mBaaS for building mobile backend services. If you are a mobile app developer definitely consider BaasBox for your backend.</p>
<h2 id="Deployd"><a href="http://deployd.com" target="_blank" rel="external">Deployd</a> <a href="https://github.com/deployd/deployd" target="_blank" rel="external"><i class="fa fa-github-square"></i></a></h2><p><img src="/assets/img/deployd.png" style="border: 1px solid #CCCCCC">
<strong>Multitenant:</strong> no
<strong>Language:</strong> JavaScript
<strong>Database:</strong> MongoDB
<strong>Documentation:</strong> 7/10
<strong>Client libraries:</strong> none</p>
<p>Deployd is an API building platform for Node.js and runs on top of MongoDB. It’s been around since 2012. The cool thing about it is its web dashboard and the CLI tool called <code>dpd</code>. The framework, it seems, was designed to be used as part of your project only, i.e. not as a standalone external API server, and has no client libraries available (tell me if I’m wrong!).</p>
<p>The project is well documented and has plenty of examples and code. They have dedicated installers for Windows and Mac that will help you get started. To create a new project you run <code>$ dpd create my-app</code> and then start the server with <code>dpd -d</code>. That’s it.</p>
<p>Deployd plays well with other JavaScript frameworks like AngularJS and Backbone.js. It has great support for collections (plain old JS objects) and events. Events can be emitted and processed easily. User management is built-in. Other functionality like social login support is provided by third-party modules.</p>
<p>Deployd is good for those who like a nice web admin UI and build JavaScript apps with Node.js. If you like MongoDB and Node.js, you’ll love Deployd!</p>
<h2 id="Telepat"><a href="http://telepat.io" target="_blank" rel="external">Telepat</a> <a href="https://github.com/telepat-io/telepat-api" target="_blank" rel="external"><i class="fa fa-github-square"></i></a></h2><p><img src="/assets/img/telepat.png">
<strong>Multitenant:</strong> yes
<strong>Language:</strong> JavaScript
<strong>Database:</strong> agnostic
<strong>Documentation:</strong>  6/10
<strong>Client libraries:</strong> Android, iOS, JavaScript</p>
<p>Telepat is the youngest framework of the bunch. It’s a realtime data sync solution for mobile and other applications. It’s fairly new -  first released in 2015. The framework is focused on realtime push and flexibility. It’s database agnostic but seems to be designed to work with NoSQL databases like Couchbase. Search is implemented on top of Elasticsearch.</p>
<p>The documentation is a work in progress but looks great. The early stage of the project means that we should expect some changes to the API. Getting started requires you to launch Elasticsearch, Redis and Kafka servers first but they provide a nice Docker package that will help you with that.</p>
<p>The API is simple with CRUD methods for users and applications. User management is supported and authentication is implemented with passwords and tokens.</p>
<p>Telepat is really new but shows a lot of potential. Lots of new features are planned and others are almost finished like push notifications. It’s well worth checking out especially if you’re building realtime apps.</p>
<h2 id="Summary">Summary</h2><p>We’ve shown how developers can leverage open source backend frameworks to accelerate time-to-market and enhance their products’ security and scalability. While some frameworks cater to mobile developers and make very specific choices in terms of technology stack, other try to have broader use cases and be database-agnostic.</p>
<p>In order to decide which BaaS package is best for your project, start by defining its scope and platform - is it going to be a mobile app or a website, for example. Then choose the framework that has the best documentation and client library for your specific platform and language - C#, Java, Javascript, etc. Finally get the code and run it locally on your development machine and give it a try.</p>
<p>Happy coding!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Let’s have a look at some modern open source backend frameworks that are available today. These frameworks act as your server-side component of your website or app. Developers use them to build and iterate on products faster than ever before by focusing on the “fun” part - the frontend (client-side).</p>]]>
    
    </summary>
    
      <category term="API" scheme="http://www.erudika.com/blog/tags/API/"/>
    
      <category term="baas" scheme="http://www.erudika.com/blog/tags/baas/"/>
    
      <category term="backend" scheme="http://www.erudika.com/blog/tags/backend/"/>
    
      <category term="frameworks" scheme="http://www.erudika.com/blog/tags/frameworks/"/>
    
      <category term="para" scheme="http://www.erudika.com/blog/tags/para/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World!]]></title>
    <link href="http://www.erudika.com/blog/2015/10/16/hello-world/"/>
    <id>http://www.erudika.com/blog/2015/10/16/hello-world/</id>
    <published>2015-10-15T21:00:00.000Z</published>
    <updated>2015-12-04T10:26:46.272Z</updated>
    <content type="html"><![CDATA[<p>Hey there! We are Erudika and this is our blog. Here, we’ll share information about our current projects and
developments. You can follow us on Twitter as well - <a href="https://twitter.com/erudika" target="_blank" rel="external">@erudika</a>, or fork us on
<a href="https://github.com/erudika" target="_blank" rel="external">GitHub</a>.</p>
<p>We’re busy developing and running our own SaaS called Para (<a href="https://paraio.com" target="_blank" rel="external">https://paraio.com</a>). If you are a developer
looking for a simple and scalable backend service, make sure you follow us and try our developer plans. They’re free!
<a id="more"></a></p>
<p><blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr">
<a href="http://t.co/4ybIZHeniM" target="_blank" rel="external">http://t.co/4ybIZHeniM</a>
is live! Our backend service is in public beta. We&#39;ve got API clients for JavaScript, Java &amp; PHP + free
dev accounts!</p>&mdash; Para (@para_io) <a href="https://twitter.com/para_io/status/616873230599647232" target="_blank" rel="external">July 3, 2015</a>
</blockquote></p>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
    <summary type="html">
    <![CDATA[<p>Hey there! We are Erudika and this is our blog. Here, we’ll share information about our current projects and
developments. You can follow us on Twitter as well - <a href="https://twitter.com/erudika">@erudika</a>, or fork us on
<a href="https://github.com/erudika">GitHub</a>.</p>
<p>We’re busy developing and running our own SaaS called Para (<a href="https://paraio.com">https://paraio.com</a>). If you are a developer
looking for a simple and scalable backend service, make sure you follow us and try our developer plans. They’re free!]]>
    
    </summary>
    
      <category term="general" scheme="http://www.erudika.com/blog/tags/general/"/>
    
  </entry>
  
</feed>
