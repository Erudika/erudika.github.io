<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Erudika Blog</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://erudika.com/blog/"/>
  <updated>2020-09-29T11:42:02.928Z</updated>
  <id>https://erudika.com/blog/</id>
  
  <author>
    <name>Alexander B.</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Announcing Scoold Cloud</title>
    <link href="https://erudika.com/blog/2020/09/22/Announcing-Scoold-Cloud/"/>
    <id>https://erudika.com/blog/2020/09/22/Announcing-Scoold-Cloud/</id>
    <published>2020-09-22T12:28:01.000Z</published>
    <updated>2020-09-29T11:42:02.928Z</updated>
    
    <content type="html"><![CDATA[<p>We’re happy to announce the availability of Scoold Cloud - the official hosting for Scoold Pro. We’ve been workingon it for the past few months and we can’t wait for you to try it out. Now you can easily deploy a Scoold Proserver in the cloud. Scaling and upgrades are handled by us, leaving you to focus on your community. When used incombination with our serverless backend, <a href="https://paraio.com" target="_blank" rel="noopener">Para</a>, Scoold Cloud offers a simple and efficientsolution for knowledge sharing within your organization, with zero maintainance.</p><a id="more"></a><p><img src="/assets/img/blogpost_media16.png" alt=""></p><h2 id="Deploy-Scoold-Pro-in-minutes"><a href="#Deploy-Scoold-Pro-in-minutes" class="headerlink" title="Deploy Scoold Pro in minutes"></a>Deploy Scoold Pro in minutes</h2><p>Hosting Scoold Pro yourself can be challenging especially if you don’t have prior experience with hosting Javaapplications in the cloud. Many of our clients have asked us for help during the installation process and someeven got stuck along the way because they are not familiar with the platform they are using.You are faced with many choices while deploying Scoold - you have to choose one of the many cloud providers(AWS, Azure, Google Cloud Platform, Heroku, DigitalOcean, etc.). Then, you can either choose to go with Dockeror run the application directly. So we decided to simplify the whole process and offer Scoold as a service.Scoold Cloud makes the deployment process effortless - it takes just a few clicks to run a fresh instance ofScoold Pro.</p><p>Let’s run a new Scoold Pro server. First, visit <a href="https://cloud.scoold.com/login" target="_blank" rel="noopener">cloud.scoold.com</a> and register.After login, click “New Deployment” on the Servers page. Let’s choose a “SMALL” instance type and, since we don’thave a Para app yet, check the “Use demo app for now” checkbox. This will connect to a demo Para app filled withexample questions and answers.</p><video width="100%" autoplay loop>  <source src="/assets/vid/scooldcloud1.mp4" type="video/mp4"></video><p>Scoold Cloud runs on top of Amazon Web Services (AWS) and when you click “Deploy” it spins up one or multipleEC2 instances along with a load balancer and sets up autoscaling automatically. Finally, it connects your clusterto the internet by setting up your own <code>.cloud.scoold.com</code> subdomain with SSL enabled. The whole process takesabout 4-5 minutes.</p><video width="100%" autoplay loop>  <source src="/assets/vid/scooldcloud2.mp4" type="video/mp4"></video><p>You can view basic metrics in realtime like request count, response times and HTTP error count. You can also editthe configuration file directly in your browser. Finally, you can terminate a server completely, thus releasing itsresources. Terminating a server <strong>does not delete your data</strong> in Para so you can simply redeploy the instance andall your data will be there.</p><h2 id="Migration-from-Stack-Overflow-for-Teams-to-Scoold-Cloud"><a href="#Migration-from-Stack-Overflow-for-Teams-to-Scoold-Cloud" class="headerlink" title="Migration from Stack Overflow for Teams to Scoold Cloud"></a>Migration from Stack Overflow for Teams to Scoold Cloud</h2><ol><li>Open your Scoold Pro website and login as admin</li><li>Download your data archive from Stack Overflow by browsing to ‘Admin settings -&gt; Account info -&gt; Download data’</li><li>On Scoold’s Administration page click ‘Import’ and select the Stack Overflow archive (.zip)</li><li>Check “This archive was exported from Stack Overflow” and click import</li></ol><p>All the data for your team on Stack Overflow, except for user badges, will be imported into Scoold.</p><h2 id="Migrating-your-existing-Scoold-server-to-Scoold-Cloud"><a href="#Migrating-your-existing-Scoold-server-to-Scoold-Cloud" class="headerlink" title="Migrating your existing Scoold server to Scoold Cloud"></a>Migrating your existing Scoold server to Scoold Cloud</h2><ol><li>Deploy a new Scoold Pro server on Scoold Cloud</li><li>Open the <code>application.conf</code> file of your existing Scoold server and copy its contents</li><li>Paste the configuration inside the “Configuration” panel for your Scoold Cloud instance</li><li>Restart your Scoold Cloud instance</li></ol><p>Keep in mind that for this operation to work you need to have Para deployed on a publicly accessible location.If you use hosted Para (ParaIO.com) this won’t be an issue, but if your Para is deployed on a private server oron your local machine, Scoold Cloud will not be able to connect and your Scoold instance will appear broken.</p><h2 id="Subscription-plans"><a href="#Subscription-plans" class="headerlink" title="Subscription plans"></a>Subscription plans</h2><p><img src="/assets/img/scooldcloud_pricing.png" alt=""></p><p>Scoold Cloud pricing starts from &euro;49/month for a single node deployment. For a load-balanced cluster of two nodeswith high availability and failover, the price per month is &euro;79/month. For larger installations you can deploy a4 node cluster for &euro;129/month. You can deploy as many instances as you like by purchasing deployment creditsfrom your “Account” page.</p><p>Billing is on a monthly basis. The prices don’t include European Union VAT (not applicable to customers outside the EU).</p><p><em>Need a Para backend for your Scoold Pro server? Sign up for a free account on <a href="https://paraio.com" target="_blank" rel="noopener">Para</a> -our fully managed backend service, supporting multiple Scoold instances. Questions? <a href="https://cloud.scoold.com" target="_blank" rel="noopener">Chat with us</a>!</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We’re happy to announce the availability of Scoold Cloud - the official hosting for Scoold Pro. We’ve been working
on it for the past few months and we can’t wait for you to try it out. Now you can easily deploy a Scoold Pro
server in the cloud. Scaling and upgrades are handled by us, leaving you to focus on your community. When used in
combination with our serverless backend, &lt;a href=&quot;https://paraio.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Para&lt;/a&gt;, Scoold Cloud offers a simple and efficient
solution for knowledge sharing within your organization, with zero maintainance.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="scoold" scheme="https://erudika.com/blog/tags/scoold/"/>
    
      <category term="saas" scheme="https://erudika.com/blog/tags/saas/"/>
    
      <category term="hosting" scheme="https://erudika.com/blog/tags/hosting/"/>
    
  </entry>
  
  <entry>
    <title>Status update - Python client, Scoold API, integrations and more</title>
    <link href="https://erudika.com/blog/2020/03/22/Status-update-Python-client-Scoold-API-integrations-and-more/"/>
    <id>https://erudika.com/blog/2020/03/22/Status-update-Python-client-Scoold-API-integrations-and-more/</id>
    <published>2020-03-22T20:41:38.000Z</published>
    <updated>2020-04-02T13:59:11.683Z</updated>
    
    <content type="html"><![CDATA[<p>Over the past year or so we’ve added a number of new features and integrations to Scoold and Para. In particular, Scoold has received hundreds of bug fixes and dozens of pull requests on GitHub. The community has been quiteactive with feature requests and suggestions.We’re also happy to report that profits from Scoold Pro are increasing and we’re proud to have several large clients,like Cisco, IBM and DBS Bank, who have successfully deployed it in production.</p><a id="more"></a><p><img src="/assets/img/blogpost_media15.png" alt=""></p><h2 id="Python-Client-for-Para"><a href="#Python-Client-for-Para" class="headerlink" title="Python Client for Para"></a>Python Client for Para</h2><p>The big news around Para is the availability of the new Para client written in Python. This has been a feature requestfor a while now and we finally shipped it in February of 2020. The Python ecosystem is evergrowing and we’re happyto support one of the most popular programming environments out there. </p><p>You can quickly install the Python client from PyPi by executing the following command:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install paraclient</span><br></pre></td></tr></table></figure><p>Then you import the library like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> paraclient <span class="keyword">import</span> ParaClient</span><br><span class="line"></span><br><span class="line">paraclient = ParaClient(<span class="string">'ACCESS_KEY'</span>, <span class="string">'SECRET_KEY'</span>);</span><br></pre></td></tr></table></figure><p>Pull requests and bug reports are more than welcome on the <a href="https://github.com/Erudika/para-client-python" target="_blank" rel="noopener">project’s page on GitHub</a>.</p><h2 id="Scoold-Pro-integrated-with-Slack-and-Mattermost"><a href="#Scoold-Pro-integrated-with-Slack-and-Mattermost" class="headerlink" title="Scoold Pro integrated with Slack and Mattermost"></a>Scoold Pro integrated with Slack and Mattermost</h2><p>First we added integration between Scoold Pro and Slack in version <code>1.33.0</code> last summer. It allows you to connectScoold Pro to a number of Slack teams and channels. You can directly map Slack channels to Scoold spaces.Once you authorize the selected channels, Scoold Pro will start sending in-chat notifications for key eventslike the creation of a new question or answer, or whenever somebody on your team was mentioned in a Scoold post.</p><p>Not only that, but you can ask and answer questions directly from Slack, using the <code>/scoold</code> slash command.Asking a question on Slack is as easy as writing <code>/scoold ask How do I do X?</code>. To answer, simply type in <code>/scoold answer [question URL] Here&#39;s my answer...</code>. You can also turn any chat message into a Scoold question or answer by using the special message actions. If you wish to compose a longer post you can open up a specialdialog box, where you can write longer text.</p><p>Approving questions and answers without leaving the channel is another handy feature for moderators who wish to keep an eye on new posts on Scoold. If new posts require explicit approval from moderators, Scoold Pro will notifythe chat by presenting the option to “Approve” or “Delete” the newly created post. </p><p>Then, around Xmas 2019 we released the Mattermost integration. Mattermost is the open source Slack alternative whichcan be self-hosted and is used by a huge number of companies. Scoold Pro integrates with Mattermost in exactly the the same way as with Slack and the two integrations have identical features. The only difference is that the integration with Mattermost is part of Scoold Pro rather than Para. This means that Scoold can be installed behinda firewall and still connect to a local instance of Mattermost even if the Para backend is hosted elsewhere ona public cloud.</p><p>There are lots of other nice features so be sure to check out the <a href="https://scoold.com/slack.html" target="_blank" rel="noopener">Scoold Pro + Slack</a>and <a href="https://scoold.com/mattermost.html" target="_blank" rel="noopener">Scoold Pro + Mattermost</a> web pages for more information.</p><h2 id="Scoold-API"><a href="#Scoold-API" class="headerlink" title="Scoold API"></a>Scoold API</h2><p>The long-awaited RESTful API is finally available in Scoold <code>1.38.0</code> (for both OSS and Pro). I has been in developmentfor a few months now and was long overdue. You can check out the <a href="https://live.scoold.com/apidocs" target="_blank" rel="noopener">Swagger documentation</a>for the full list of API resources. There are no API clients at the moment but you can easily generate one fromthe <a href="https://live.scoold.com/api.json" target="_blank" rel="noopener">API schema</a>, using <a href="https://swagger.io/tools/swagger-codegen/" target="_blank" rel="noopener">Swagger Codegen</a>.</p><p>This is a fully-fledged API, meaning you can execute all read and write operations in Scoold programmatically. It is much easier to call the Scoold API and create a new question, for example, than to call the Para API and constructthe question object manually. This is because there are extra steps and logic behind each and every Scoold task, likecreating a new post or user.</p><p>When combined with webhooks, the Scoold API allows you to create complex and powerful integrations for the needs of your organization. See the <a href="https://github.com/Erudika/scoold#rest-api" target="_blank" rel="noopener">README</a> to learn more.</p><h2 id="Backup-and-restore"><a href="#Backup-and-restore" class="headerlink" title="Backup and restore"></a>Backup and restore</h2><p>Another important new feature has landed in Scoold <code>1.37.0</code> and that is the ability to create full copies of the Scoolddatabase which can later be restored. Scoold administrators can download zipped copies of the data from the “Administration” page. Each ZIP archive contains a number of JSON files which contain the data extracted from Para forthe corrsponding Scoold application.</p><p>To restore a previously created backup, simply select a ZIP archive and click the “Import” button. You can alsoimport a single JSON file containing one or more Para objects. This is useful in situations where you only wantto do a partial restore of some of the objects.</p><h2 id="Themes"><a href="#Themes" class="headerlink" title="Themes"></a>Themes</h2><p>And finally, we’ve improved the customizabitly of Scoold with support for custom theming and 5 ready-to-use themes.There’s also a new dark mode. Take a look:</p><p><img src="/assets/img/dark_mode.png" alt=""></p><p>Scoold administrators can create custom themes by modifying the CSS of an existing theme or by creating a customstylesheet from scratch.</p><p><em>You can download Scoold from <a href="https://scoold.com" target="_blank" rel="noopener">Scoold.com</a> and sign up for a free account on <a href="https://paraio.com" target="_blank" rel="noopener">Para</a> - our fully managed backend service, supporting multiple Scoold instances. Questions? Chat with us <a href="https://gitter.im/Erudika/para" target="_blank" rel="noopener">on Gitter</a>!</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Over the past year or so we’ve added a number of new features and integrations to Scoold and Para. In particular, 
Scoold has received hundreds of bug fixes and dozens of pull requests on GitHub. The community has been quite
active with feature requests and suggestions.
We’re also happy to report that profits from Scoold Pro are increasing and we’re proud to have several large clients,
like Cisco, IBM and DBS Bank, who have successfully deployed it in production.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="para" scheme="https://erudika.com/blog/tags/para/"/>
    
      <category term="scoold" scheme="https://erudika.com/blog/tags/scoold/"/>
    
      <category term="API" scheme="https://erudika.com/blog/tags/API/"/>
    
      <category term="slack" scheme="https://erudika.com/blog/tags/slack/"/>
    
      <category term="mattermost" scheme="https://erudika.com/blog/tags/mattermost/"/>
    
      <category term="python" scheme="https://erudika.com/blog/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Building a full stack application from scratch with React</title>
    <link href="https://erudika.com/blog/2019/08/14/Building-a-full-stack-application-from-scratch-with-React/"/>
    <id>https://erudika.com/blog/2019/08/14/Building-a-full-stack-application-from-scratch-with-React/</id>
    <published>2019-08-14T20:38:11.000Z</published>
    <updated>2019-08-14T22:46:13.025Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Note:</strong> This article is a clone of <a href="https://erudika.com/blog/2016/06/09/Building-the-stack-from-scratch-with-Angular-2/">another one written for Angular</a>.</p><p>In this tutorial we’re going to build a simple single-page application with <strong>React</strong> (v16 and above). This is intendedfor developers unfamiliar with the new framework or having some experience with React. First of all, I got<strong>Visual Studio Code</strong> installed on my machine and it’s running on Linux. I chose VS Code because we’ll be working with<strong>JavaScript</strong> and <strong>JSX</strong> and it has great support for those, but you can code in your favourite IDE as well.The code project for this article was generated with <code>create-react-app</code>, a scaffolding tool for React. You’ll also need to have <strong>Git</strong>, <strong>Node.js</strong> and <strong>npm</strong> installed.</p><a id="more"></a><p><img src="https://erudika.com/assets/img/blogpost_media14.png" alt></p><h2 id="Step-0-frontend"><a href="#Step-0-frontend" class="headerlink" title="Step 0 (frontend)"></a>Step 0 (frontend)</h2><ul><li>Get <a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener">Visual Studio Code</a></li><li>Get <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a></li><li>Get <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js with npm</a></li><li>Generate a project with <a href="https://create-react-app.dev/docs/getting-started" target="_blank" rel="noopener">‘create-react-app’</a> with <code>npx create-react-app react-para --use-npm</code></li><li>Open the project in the VS Code editor</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app react-para --use-npm </span><br><span class="line"><span class="built_in">cd</span> react-para</span><br><span class="line"><span class="comment"># watches your files and does live reload</span></span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>Next - <strong>the backend</strong>. Here, I could write a simple backend in Node.js and Express but I’m lazy so I chose not to.Instead, I’m going to use <strong>Para</strong> for my backend and I’m not going to write <em>any</em> code on the server. If you arenew to Para, it’s a general-purpose backend framework/server written in Java. It will save me a lot of time and effortbecause it has a nice JSON API for our app to connect to. To run the server you’re going to need a Java runtime.</p><h2 id="Step-0-backend"><a href="#Step-0-backend" class="headerlink" title="Step 0 (backend)"></a>Step 0 (backend)</h2><ul><li>Get <a href="https://jdk.java.net/12/" target="_blank" rel="noopener">Java</a></li><li>Get <a href="https://paraio.org/" target="_blank" rel="noopener">Para</a></li><li>Start the server in a separate terminal:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># run Para</span></span><br><span class="line">java -jar para-x.y.z.jar</span><br></pre></td></tr></table></figure><p>Now, check if Para is running - open your browser and go to <code>http://localhost:8080/v1</code>. You should see a response likethis:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"info"</span> : <span class="string">"Para - a backend for busy developers."</span>,</span><br><span class="line">  <span class="attr">"version"</span> : <span class="string">"x.y.z"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We haven’t got access keys to the server yet, so let’s go ahead and do that, open:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/v1/_setup</span><br></pre></td></tr></table></figure><p>Save the credentials to a file, we’ll need them later to access the backend API.</p><h2 id="Step-1-API-access"><a href="#Step-1-API-access" class="headerlink" title="Step 1 - API access"></a>Step 1 - API access</h2><p>Let’s create an app for storing recipes - a recipe manager. Our goal will be to build just the basic CRUD functionality,without adding extra features like authentication and login pages. By default the backend is secured and only signedrequests are allowed, but for the purpose of this tutorial we’re going to add a new permission to allow all requests tojust one specific resource - <code>/v1/recipes</code>.</p><p>Go to <a href="https://console.paraio.org" target="_blank" rel="noopener">console.paraio.org</a> and enter the credentials that you saved in the beginning. Alsoclick the cog icon to edit the API endpoint and set it to <code>http://localhost:8080</code>. Click ‘Connect’.</p><p>Next, go to ‘App’ on the left and edit the root app called <code>para</code>. You’ll see a section for resource permissions andthere you will write a simple permission definition in JSON:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"*"</span>: &#123;</span><br><span class="line">    <span class="attr">"recipes"</span>: [<span class="string">"*"</span>, <span class="string">"?"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This defines a single permission that allows <code>* - everyone</code> to access <code>/v1/recipes</code> using a list of allowed methods,in this case <code>* - all HTTP methods</code> and <code>? - anonymous access</code> is allowed. Thus, we’re essentially making this resourcepublicly available. Click ‘Save Changes’.</p><p><img src="https://erudika.com/assets/img/rman_1.png" alt></p><h2 id="Step-2-CRUD-recipes"><a href="#Step-2-CRUD-recipes" class="headerlink" title="Step 2 - CRUD recipes"></a>Step 2 - CRUD recipes</h2><p>Let’s create a new frontend component called <code>Home.js</code>.Now let’s edit the ‘Home’ component in <code>src/Home.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            q: <span class="string">''</span>,</span><br><span class="line">            createMode: <span class="literal">false</span>,</span><br><span class="line">            recipesList: [],</span><br><span class="line">            editedRecipes: &#123;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s implement the <code>render()</code> function:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div id=<span class="string">"home"</span>&gt;</span><br><span class="line">            &lt;h1&gt;My Recipes &amp;nbsp; &lt;button onClick=&#123;() =&gt; this.newRecipeForm()&#125;&gt;Add&lt;/button&gt;&lt;/h1&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;form onSubmit=&#123;<span class="keyword">this</span>.search&#125;&gt;</span><br><span class="line">                &lt;label&gt;Search&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;input type="text" defaultValue="" name="q" placeholder="Search" id="search" /</span>&gt;</span><br><span class="line">                &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">            &#123;<span class="keyword">this</span>.state.recipesList &amp;&amp; <span class="keyword">this</span>.state.recipesList.length === <span class="number">0</span> ? &lt;div className="empty-box"&gt;No recipes to show.&lt;/div&gt; : <span class="string">""</span>&#125;</span><br><span class="line">            &lt;ul&gt;&#123;<span class="keyword">this</span>.state.recipesList.map(<span class="function">(<span class="params">recipe, index</span>) =&gt;</span> &lt;<span class="keyword">this</span>.RecipeItem key=&#123;recipe.id || <span class="string">"new"</span> &#125; recipe=&#123;recipe&#125; index=&#123;index&#125; /&gt;)&#125;&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>RecipeItem</code> element is implemented next:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">RecipeItem(props) &#123;</span><br><span class="line">    <span class="keyword">let</span> recipe = props.recipe;</span><br><span class="line">    <span class="keyword">let</span> index = props.index;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;li className=<span class="string">"recipe-box"</span>&gt;</span><br><span class="line">            &lt;div className=&#123;(<span class="keyword">this</span>.state.editedRecipes[recipe.id] || (!recipe.id &amp;&amp; <span class="keyword">this</span>.state.createMode)) ? <span class="string">"hide"</span> : <span class="string">""</span>&#125;&gt;</span><br><span class="line">                &lt;h3&gt;&#123;recipe.name&#125;&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">                &lt;hr /</span>&gt;</span><br><span class="line">                &lt;div&gt;&#123;<span class="keyword">this</span>.renderMD(recipe.text)&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                &lt;br /</span>&gt;</span><br><span class="line">                &lt;button onClick=&#123;(e) =&gt; <span class="keyword">this</span>.editRecipe(recipe)&#125;&gt;edit&lt;<span class="regexp">/button&gt; &amp;nbsp;</span></span><br><span class="line"><span class="regexp">            &lt;a href="/</span><span class="string">" onClick=&#123;(e) =&gt; &#123; this.removeRecipe(recipe.id); e.preventDefault() &#125;&#125; className="</span>red right<span class="string">"&gt;remove&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">                &lt;form onSubmit=&#123;(e) =&gt; &#123; this.addRecipe(recipe); e.preventDefault() &#125;&#125; className=&#123;((recipe.id || !this.state.createMode) &amp;&amp; !this.state.editedRecipes[recipe.id]) ? "</span>hide<span class="string">" : "</span><span class="string">"&#125;&gt;</span></span><br><span class="line"><span class="string">                    &lt;div&gt;</span></span><br><span class="line"><span class="string">                        &lt;input type="</span>text<span class="string">" value=&#123;recipe.name&#125; onChange=&#123;(e) =&gt; this.handleInputChange(e, recipe, index)&#125; placeholder="</span>Title<span class="string">" name="</span>name<span class="string">" /&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">                    &lt;br /&gt;</span></span><br><span class="line"><span class="string">                    &lt;div&gt;</span></span><br><span class="line"><span class="string">                        &lt;textarea value=&#123;recipe.text&#125; onChange=&#123;(e) =&gt; this.handleInputChange(e, recipe, index)&#125; rows="</span><span class="number">10</span><span class="string">" cols="</span><span class="number">33</span><span class="string">" placeholder="</span>Recipe<span class="string">" name="</span>text<span class="string">"&gt;&lt;/textarea&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">                    &lt;button type="</span>submit<span class="string">"&gt;</span></span><br><span class="line"><span class="string">                        &lt;span&gt;&#123;this.state.createMode ? "</span>Add<span class="string">" : "</span>Save<span class="string">"&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">                    &lt;/button&gt;</span></span><br><span class="line"><span class="string">                    &amp;nbsp;</span></span><br><span class="line"><span class="string">                &lt;a href="</span>/<span class="string">" onClick=&#123;(e) =&gt; &#123; this.closeForm(recipe.id); e.preventDefault() &#125;&#125;&gt;Close&lt;/a&gt;</span></span><br><span class="line"><span class="string">                &lt;/form&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>I’ve added the “Add” button which shows the form where we can write a recipe (controlled by <code>newRecipeForm()</code>), a textarea,and a close button. Notice how the text value of the “Add” button changes to “Save” when we’re in edit mode.</p><p>Let’s create the toolbar and navbar components in <code>src/App.js</code>. We’ll also install <code>react-router</code> because we want to have2 pages - <code>/</code> Home, and <code>/about</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save react-router-dom</span><br></pre></td></tr></table></figure><p>Here’s the code for <code>App.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter, Route, NavLink &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> pkg <span class="keyword">from</span> <span class="string">'../package.json'</span>;</span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">'./About'</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./Home'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">                &lt;header className=<span class="string">"App-header"</span>&gt;</span><br><span class="line">                    &lt;h1&gt;Recipe Manager &lt;code&gt;&lt;small&gt;v&#123;pkg.version&#125;&lt;/small&gt;&lt;/code&gt;&lt;/h1&gt;</span><br><span class="line">                    &lt;div className=<span class="string">"more"</span>&gt;&lt;/div&gt;</span><br><span class="line">                &lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;BrowserRouter basename=&#123;process.env.NODE_ENV === <span class="string">"production"</span> ? <span class="string">"/react-para"</span> : <span class="string">"/"</span>&#125;&gt;</span><br><span class="line">                    &lt;nav&gt;</span><br><span class="line">                        &lt;NavLink to=<span class="string">"/"</span> exact activeClassName=<span class="string">"router-link-active"</span> &gt;Home&lt;<span class="regexp">/NavLink&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;NavLink to="/</span>about<span class="string">" activeClassName="</span>router-link-active<span class="string">"&gt;About&lt;/NavLink&gt;</span></span><br><span class="line"><span class="string">                    &lt;/nav&gt;</span></span><br><span class="line"><span class="string">                    &lt;Route path="</span>/<span class="string">" exact component=&#123;Home&#125; /&gt;</span></span><br><span class="line"><span class="string">                    &lt;Route path="</span>/about<span class="string">" exact component=&#123;About&#125; /&gt;</span></span><br><span class="line"><span class="string">                &lt;/BrowserRouter&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default App;</span></span><br></pre></td></tr></table></figure><p>Let’s create a new service to talk to our Para backend and fetch recipes. Let’s call it <code>RecipesService</code>. Import the file by adding the following line to the top of <code>src/Home.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> RecipeService <span class="keyword">from</span> <span class="string">'./RecipeService'</span>;</span><br></pre></td></tr></table></figure><p>The service file should be located in <code>src/RecipeService.js</code>. We’ll modify the file <code>src/RecipeService.js</code> andadd a basic get method. Let’s also add the code for making the <code>POST</code> request to the backend for creating recipes:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">RecipeService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> appID = process.env.PARA_APP_ID || <span class="string">"app:myapp"</span>;</span><br><span class="line">    <span class="keyword">static</span> appSecret = process.env.PARA_SECRET || <span class="string">""</span>; <span class="comment">// unused</span></span><br><span class="line">    <span class="keyword">static</span> RECIPES_RESOURCE = (process.env.PARA_ENDPOINT || <span class="string">"https://paraio.com"</span>) + <span class="string">"/v1/recipes"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> headers = &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">        <span class="string">'Authorization'</span>: <span class="string">'Anonymous '</span> + RecipeService.appID</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> get() &#123;</span><br><span class="line">        <span class="keyword">return</span> fetch(RecipeService.RECIPES_RESOURCE, &#123; <span class="attr">headers</span>: RecipeService.headers&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> add(name, text) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!name || !text) &#123; <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(); &#125;</span><br><span class="line">      <span class="keyword">const</span> recipe = &#123; name, text &#125;;</span><br><span class="line">      <span class="keyword">return</span> fetch(RecipeService.RECIPES_RESOURCE, &#123; <span class="attr">headers</span>: RecipeService.headers,</span><br><span class="line">        body: <span class="built_in">JSON</span>.stringify(recipe), <span class="attr">method</span>: <span class="string">'POST'</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>process.env.PARA_APP_ID</code> is an environment variable which you can override. The same is true for all the other envvariables in the code above. Note that in a production build <code>process.env.NODE_ENV</code> always equals <code>production</code>, otherwiseit has a value of <code>development</code>.</p><p>Now we’re going to focus on that <code>addRecipe()</code> method so let’s implement it:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">addRecipe(recipe) &#123;</span><br><span class="line">    <span class="keyword">if</span> (recipe &amp;&amp; recipe.id) &#123;</span><br><span class="line">        RecipeService.edit(recipe.id, recipe.name, recipe.text);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> recipes = <span class="keyword">this</span>.state.recipesList.slice(<span class="number">0</span>);</span><br><span class="line">        RecipeService.add(recipe.name, recipe.text).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (data) &#123;</span><br><span class="line">                data.json().then(<span class="function"><span class="params">d</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.state.createMode) &#123;</span><br><span class="line">                        <span class="keyword">const</span> first = recipes.shift();</span><br><span class="line">                        recipes.unshift(d);</span><br><span class="line">                        recipes.unshift(first);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        recipes.unshift(d);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">this</span>.setState(&#123; <span class="attr">recipesList</span>: recipes &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.closeForm(recipe.id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the file <code>Home.js</code> we have a list of recipes <code>recipesList</code> which is an <code>Array</code> and it’s part of our local state object.We also have <code>this.state.editedRecipes: {}</code> which keeps track of which recipe object is being edited.</p><p>Let’s also add the method for listing recipes <code>listRecipes()</code> and call it upon initialization. For this we also need to add another method called <code>componentDidMount()</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">let</span> recipes = <span class="keyword">this</span>.listRecipes();</span><br><span class="line">    <span class="keyword">let</span> edited = &#123;&#125;;</span><br><span class="line">    recipes.then(<span class="function"><span class="params">recipes</span> =&gt;</span> &#123;</span><br><span class="line">        recipes.forEach(<span class="function">(<span class="params">recipe, index</span>) =&gt;</span> &#123;</span><br><span class="line">            edited[recipe.id] = <span class="literal">false</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;).finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">editedRecipes</span>:  <span class="built_in">Object</span>.assign(<span class="keyword">this</span>.state.editedRecipes, edited)&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> listRecipes() &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> RecipeService.get();</span><br><span class="line">    <span class="keyword">const</span> d = <span class="keyword">await</span> data.json();</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">recipesList</span>: d.items &#125;);</span><br><span class="line">    <span class="keyword">return</span> d.items;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>listRecipes()</code> method is marked <code>async</code> and it calls the backend API for a list of objects of type <code>recipe</code>.When that’s done, we finally update the state and populate the <code>recipeList</code> array.</p><p>In <code>src/Home.js</code> we loop over the <code>recipesList</code> of all available recipes, and also a box which appearswhen there are no recipes to show:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;this.state.recipesList.map((recipe, index) =&gt; <span class="tag">&lt;<span class="name">this.RecipeItem</span> <span class="attr">key</span>=<span class="string">&#123;recipe.id</span> || "<span class="attr">new</span>" &#125; <span class="attr">recipe</span>=<span class="string">&#123;recipe&#125;</span> <span class="attr">index</span>=<span class="string">&#123;index&#125;</span> /&gt;</span>)&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Let’s add the styling for <code>.recipe-box</code> and <code>.empty-box</code> in <code>src/index.css</code> (the main CSS file):</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.recipe-box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-table;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">30px</span> <span class="number">30px</span> <span class="number">0</span> -<span class="number">7px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#106cc8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.empty-box</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1.5em</span> <span class="number">0</span> <span class="number">1em</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">3em</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> dashed;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In <code>src/index.css</code> I’ve also added a few more tweaks to the CSS:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span>, <span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#106cc8</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#106cc8</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: none;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(255, 255, 255, 0.87);</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">background-color</span>: <span class="number">#28739e</span>; &#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.small</span> &#123; <span class="attribute">font-size</span>: <span class="number">12px</span>; <span class="attribute">height</span>: <span class="number">30px</span>; &#125;</span><br><span class="line"><span class="selector-class">.red</span> &#123; <span class="attribute">color</span>: indianred; &#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123; <span class="attribute">float</span>: right; &#125;</span><br><span class="line"><span class="selector-class">.center</span> &#123; <span class="attribute">text-align</span>: center; &#125;</span><br><span class="line"><span class="selector-class">.hide</span> &#123; <span class="attribute">display</span>: none; &#125;</span><br></pre></td></tr></table></figure><p><img src="https://erudika.com/assets/img/rman_2.png" alt></p><p>So, we should now we able to add recipes and after we click “Add” the form should be cleared and closed.For this let’s add a couple of methods in <code>Home.js</code> - one to initialize the form and one to reset thestate of the form:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">newRecipeForm() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.state.createMode) &#123;</span><br><span class="line">        <span class="keyword">this</span>.state.recipesList.unshift(&#123; <span class="attr">name</span>: <span class="string">''</span>, <span class="attr">text</span>: <span class="string">''</span> &#125;);</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123; <span class="attr">createMode</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">closeForm(recipeId) &#123;</span><br><span class="line">    <span class="keyword">if</span> (recipeId) &#123;</span><br><span class="line">        <span class="keyword">let</span> props = <span class="keyword">this</span>.state.editedRecipes;</span><br><span class="line">        props[recipeId] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123; <span class="attr">editedRecipes</span>: props &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://erudika.com/assets/img/rman_3.png" alt></p><p>The variable <code>recipeId</code> will keep the value of the <code>id</code> when a recipe is being edited. When “Save” is clicked this<code>id</code> is passed to the service and the backend so it won’t create a new object, just update an existing one.We’re issuing these requests and we don’t care about the results because we can update the UIinstantly, without having to wait for the request to finish.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">editRecipe(recipe) &#123;</span><br><span class="line">    <span class="keyword">let</span> props = &#123;&#125;;</span><br><span class="line">    props[recipe.id] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">editedRecipes</span>: <span class="built_in">Object</span>.assign(<span class="keyword">this</span>.state.editedRecipes, props) &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">removeRecipe(id) &#123;</span><br><span class="line">    RecipeService.remove(id).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> recipes = <span class="keyword">this</span>.state.recipesList.slice(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123; <span class="attr">recipesList</span>: recipes.filter(<span class="function">(<span class="params">el</span>) =&gt;</span> el.id !== id) &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s also add similar methods in our <code>RecipeService</code> for updating and deleting recipes. The methods <code>editRecipe()</code> and<code>removeRecipe()</code> are relatively straightforward - when editing, we switch to edit mode and we show the form, whenremoving we just filter the array <code>recipesList</code> and we discard the deleted recipe if it matches the <code>id</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> edit(id, name, text) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!id) &#123; <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(); &#125;</span><br><span class="line">  <span class="keyword">const</span> recipe = &#123; name, text &#125;;</span><br><span class="line">  <span class="keyword">return</span> fetch(RecipeService.RECIPES_RESOURCE + <span class="string">'/'</span> + id, &#123; <span class="attr">headers</span>: RecipeService.headers,</span><br><span class="line">    body: <span class="built_in">JSON</span>.stringify(recipe), <span class="attr">method</span>: <span class="string">'PATCH'</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> remove(id) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!id) &#123; <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(); &#125;</span><br><span class="line">  <span class="keyword">return</span> fetch(RecipeService.RECIPES_RESOURCE + <span class="string">'/'</span> + id, &#123; <span class="attr">headers</span>: RecipeService.headers, <span class="attr">method</span>: <span class="string">'DELETE'</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://erudika.com/assets/img/rman_4.png" alt></p><p>We can now add, edit and remove recipes but they aren’t very pretty and the formatting of the textis lost. In the next step we’ll make it possible to write the recipe text in Markdown and then render it in HTML.</p><h2 id="Step-3-Markdown-support"><a href="#Step-3-Markdown-support" class="headerlink" title="Step 3 - Markdown support"></a>Step 3 - Markdown support</h2><p>First of all, let’s install <code>showdown</code> - a nice JavaScript parser for Markdown:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install showdown --save</span><br></pre></td></tr></table></figure><p>Then we import it in <code>Home.js</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Converter &#125; from &apos;showdown&apos;;</span><br></pre></td></tr></table></figure><p>Finally we’ll implement a simple method called <code>md2html()</code> which will be used in our template.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">md2html(text) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Converter().makeHtml(text || <span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line">renderMD(text) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">__html</span>: <span class="keyword">this</span>.md2html(text) &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In our render method in <code>Home.js</code> we’ll replace <code>&lt;div&gt;{this.renderMD(recipe.text)}&lt;/div&gt;</code> with the actual rendered Markdown:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">dangerouslySetInnerHTML</span>=<span class="string">&#123;this.renderMD(recipe.text)&#125;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>Now we render the text to HTML on the client and this allows us to write beautiful recipes like this:</p><p><img src="https://erudika.com/assets/img/rman_5.png" alt></p><h2 id="Step-4-Full-text-search"><a href="#Step-4-Full-text-search" class="headerlink" title="Step 4 - Full-text search"></a>Step 4 - Full-text search</h2><p>The final feature left is the recipe search box. We’ll use the built-in full-text search in Para. In <code>RecipeService.js</code> add:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> search(q) &#123;</span><br><span class="line">  <span class="keyword">return</span> fetch(RecipeService.RECIPES_RESOURCE + <span class="string">'?q='</span> + q, &#123; <span class="attr">headers</span>: RecipeService.headers&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And in <code>Home.js</code> add:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">search(event) &#123;</span><br><span class="line">    RecipeService.search(event.target.q.value || <span class="string">'*'</span>).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        data.json().then(<span class="function"><span class="params">d</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (d.items) &#123;</span><br><span class="line">                <span class="keyword">this</span>.setState(&#123; <span class="attr">recipesList</span>: d.items &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    event.preventDefault();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Finally, we add the method for handling changes to the input text:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">handleInputChange(event, recipe, index) &#123;</span><br><span class="line">    <span class="keyword">let</span> recipes = <span class="keyword">this</span>.state.recipesList.slice(<span class="number">0</span>);</span><br><span class="line">    recipe[event.target.name] = event.target.value;</span><br><span class="line">    recipes[index] = recipe;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        recipesList: <span class="built_in">Object</span>.assign(<span class="keyword">this</span>.state.recipesList, recipes)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And we’re done! Here’s final result of our <strong>Recipe Manager</strong>(check out <a href="http://albogdano.github.io/react-para/" target="_blank" rel="noopener">the live demo</a>):</p><p><img src="https://erudika.com/assets/img/rman_6.png" alt></p><h2 id="Final-touches"><a href="#Final-touches" class="headerlink" title="Final touches"></a>Final touches</h2><p>You can see the result in your browser by running <code>npm start</code>. Optionally, you can make this web application “progressive”(PWA) by editing <code>index.js</code> and adding <code>serviceWorker.register();</code>. This will create a <code>manifest.json</code> and make thepage available offline. Our code now passes the Lighthouse audit with flying colors!</p><p><img src="https://erudika.com/assets/img/rman_7.png" alt></p><p>All that is left is to build the project for production and deploy it:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br><span class="line"># git push origin master</span><br></pre></td></tr></table></figure><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Learning React takes some time as it introduces a lot of new concepts and new syntax (JSX).Writing in JSX feels weird at first but you get used to it pretty quickly. The way <code>setState()</code> works also took mea bit of time to understand. In general, the experience of writing React apps with the helpof the new React CLI tool is great - the scaffolding just works, the build process is fast and painless,the JSX syntax is somewhat clean (but not as clean as in Angular), the app is well structured and the error messages are clear and understandable.</p><p><strong>Things we did:</strong></p><ul><li>generated a new project from scratch with React CLI</li><li>wrote a few fancy AJAX calls to our backend API using <code>fetch</code></li><li>wired a bunch of simple JS code between a component and a service</li><li>wrote some good old HTML and CSS</li><li>imported an external library with npm an typings</li></ul><p><strong>Things we didn’t do:</strong></p><ul><li>didn’t write <em>any</em> backend code for CRUD operations on recipes</li><li>didn’t define a schema for the “recipe” type on the server side</li></ul><p>The complete code for this tutorial is on GitHub at <a href="https://github.com/albogdano/react-para" target="_blank" rel="noopener">albogdano/react-para</a>.I’ve deployed the same code to GitHub pages as a <a href="http://albogdano.github.io/react-para/" target="_blank" rel="noopener">live demo</a> whichis powered by our <a href="https://paraio.com" target="_blank" rel="noopener">cloud-based Para service</a>.</p><p> <em>Have questions or suggestions? Chat with us <a href="https://gitter.im/Erudika/para" target="_blank" rel="noopener">on Gitter</a>!</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This article is a clone of &lt;a href=&quot;https://erudika.com/blog/2016/06/09/Building-the-stack-from-scratch-with-Angular-2/&quot;&gt;another one written for Angular&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this tutorial we’re going to build a simple single-page application with &lt;strong&gt;React&lt;/strong&gt; (v16 and above). This is intended
for developers unfamiliar with the new framework or having some experience with React. First of all, I got
&lt;strong&gt;Visual Studio Code&lt;/strong&gt; installed on my machine and it’s running on Linux. I chose VS Code because we’ll be working with
&lt;strong&gt;JavaScript&lt;/strong&gt; and &lt;strong&gt;JSX&lt;/strong&gt; and it has great support for those, but you can code in your favourite IDE as well.
The code project for this article was generated with &lt;code&gt;create-react-app&lt;/code&gt;, a scaffolding tool for React. 
You’ll also need to have &lt;strong&gt;Git&lt;/strong&gt;, &lt;strong&gt;Node.js&lt;/strong&gt; and &lt;strong&gt;npm&lt;/strong&gt; installed.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="para" scheme="https://erudika.com/blog/tags/para/"/>
    
      <category term="tutorial" scheme="https://erudika.com/blog/tags/tutorial/"/>
    
      <category term="react" scheme="https://erudika.com/blog/tags/react/"/>
    
      <category term="jsx" scheme="https://erudika.com/blog/tags/jsx/"/>
    
  </entry>
  
  <entry>
    <title>Webhooks implemented in Para and Scoold</title>
    <link href="https://erudika.com/blog/2019/07/04/Webhooks-implemented-in-Para-and-Scoold/"/>
    <id>https://erudika.com/blog/2019/07/04/Webhooks-implemented-in-Para-and-Scoold/</id>
    <published>2019-07-04T19:30:14.000Z</published>
    <updated>2019-07-04T22:06:48.211Z</updated>
    
    <content type="html"><![CDATA[<p>With the release of Para <code>1.32.0</code> we’ve introduced support for webhooks for all apps. This feature is available now on <a href="https://paraio.com" target="_blank" rel="noopener">ParaIO.com</a> as well. This is very good news for everyone who wants to integrate Para withexternal services. It makes Para even more flexible and enables you to have near real-time notifications for eventslike <code>create</code>, <code>update</code> and <code>delete</code> for any object type you choose.</p><a id="more"></a><p><img src="/assets/img/blogpost_media13.png" alt></p><p>Webhooks are essentially <code>POST</code> requests made from Para to a destination URL of your choice. The destination has tobe able to process the request and return <code>200 OK</code>. This is a much more efficient way of communication and is wellsummarized by the phrase <strong>Don’t call us, we’ll call you!</strong>.</p><pre>      Client      +----------------------------------------------+      +----------------------------------------------+                     ^             |                     |             |         Here's some |             | OK! 10x!         new data!   |             |                     |             v      +----------------------------------------------+      +----------------------------------------------+      Server+-------------------------------------------------------->                           Time</pre><p>The implementation is fully asynchronous and uses a queue for decoupling the message publishing from the actual processing and delivery of payloads. There’s also a <code>LocalQueue</code> implementation which holds messages in memory and a <code>LocalRiver</code> (worker) which periodically pulls messages from the queue and forwards them to their destinations. The <code>AWSQueue</code> class implements webhooks processing based on <a href="https://aws.amazon.com/sqs/" target="_blank" rel="noopener">AWS SQS</a> queues and is recommended for production use. Any other queue server can be potentially supported via a plugin which implements the <code>Queue</code> interface.</p><p>Webhooks can be enabled in Para by adding <code>para.webhooks_enabled = true</code> in your <code>application.conf</code>. The same appliesfor Scoold where they are enabled by default.</p><p>It’s quite easy to subscribe to any event triggered by Para. There are 6 event types: <code>update</code>, <code>create</code>, <code>delete</code>, <code>updateAll</code>, <code>createAll</code>, <code>deleteAll</code>. These are triggered by their respective mutating operations on objects.For example, a webhook might be a registered for all <code>update</code> events in Para, and also it might only be interested in updated <code>user</code> objects. So we can register a new webhook like so:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST /v1/webhooks</span><br><span class="line">&#123;</span><br><span class="line">  &quot;urlEncoded&quot;: true,</span><br><span class="line">  &quot;update&quot;: true,</span><br><span class="line">  &quot;targetUrl&quot;: &quot;https://destination.url&quot;,</span><br><span class="line">  &quot;secret&quot;: &quot;secret&quot;,</span><br><span class="line">  &quot;typeFilter&quot;:&quot;user&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you don’t want to use the API, simply open the web console and register your webhook with the simple user interface.</p><p><img src="/assets/img/para_webhooks1.png" alt></p><p>Of course, Para allows you to register multiple destination URLs so you can essentially receive identical event at twodifferent places. You can also register webhooks which are subscribed to all events on all types in Para:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /v1/webhooks</span><br><span class="line">&#123;</span><br><span class="line">  &quot;active&quot;: true,</span><br><span class="line">  &quot;urlEncoded&quot;: true,</span><br><span class="line">  &quot;update&quot;: true,</span><br><span class="line">  &quot;create&quot;: true,</span><br><span class="line">  &quot;delete&quot;: true,</span><br><span class="line">  &quot;updateAll&quot;: true,</span><br><span class="line">  &quot;createAll&quot;: true,</span><br><span class="line">  &quot;deleteAll&quot;: true,</span><br><span class="line">  &quot;targetUrl&quot;: &quot;https://destination.url&quot;,</span><br><span class="line">  &quot;secret&quot;: &quot;secret&quot;,</span><br><span class="line">  &quot;typeFilter&quot;:&quot;*&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If the typeFilter is either blank or <code>*</code>, all selected events will be sent to the destination, regardless of the objecttype.</p><p>All webhook payloads are signed by Para using <code>HmacSHA256</code> and each <code>Webhook</code> object has its own secret key. Securing webhooksthis way is essential because clients can verify the signature and check if the request is actually coming from Para rather thana third party. It is highly recommended that you verify the signature of each payload contained in the <code>X-Webhook-Signature</code>header. </p><p>If a client is not responding to <code>POST</code> requests, Para will try again several times before giving up and eventually that destination URL will be disabled. However, you can always correct the URL and reenable the webhook. </p><p>Each payload has a specific format which is similar to the other JSON responses of the Para REST API.Here’s an sample payload when URL-decoded:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;appid&quot;: &quot;myapp&quot;,</span><br><span class="line">  &quot;event&quot;: &quot;create&quot;,</span><br><span class="line">  &quot;timestamp&quot;: 1486848081865,</span><br><span class="line">  &quot;items&quot;: [&#123;&#125;, ...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>items</code> field can contain one or more <code>ParaObject</code> objects which are the result of that particular event.</p><p>And the cool thing about webhooks in Para is that all clients can benefit from that immediately, without much effort.In Scoold, for example, we’ve added webhooks support with a minimal amount of code. You can now listen to <code>create</code>events on the <code>question</code> type, for example, to get notified when somebody asks a new question. </p><p><em>You can start playing with webhooks right away, by signing up for a free account on <a href="https://paraio.com" target="_blank" rel="noopener">Para</a> - our fully managed backend service for busy developers. Also, chat with us <a href="https://gitter.im/Erudika/para" target="_blank" rel="noopener">on Gitter</a>!</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;With the release of Para &lt;code&gt;1.32.0&lt;/code&gt; we’ve introduced support for webhooks for all apps. This feature is available now 
on &lt;a href=&quot;https://paraio.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ParaIO.com&lt;/a&gt; as well. This is very good news for everyone who wants to integrate Para with
external services. It makes Para even more flexible and enables you to have near real-time notifications for events
like &lt;code&gt;create&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; for any object type you choose.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="release" scheme="https://erudika.com/blog/tags/release/"/>
    
      <category term="para" scheme="https://erudika.com/blog/tags/para/"/>
    
      <category term="scoold" scheme="https://erudika.com/blog/tags/scoold/"/>
    
      <category term="webhooks" scheme="https://erudika.com/blog/tags/webhooks/"/>
    
  </entry>
  
  <entry>
    <title>Status update - containers, Java 11 and more</title>
    <link href="https://erudika.com/blog/2019/01/28/Status-update-containers-Java-11-and-more/"/>
    <id>https://erudika.com/blog/2019/01/28/Status-update-containers-Java-11-and-more/</id>
    <published>2019-01-28T21:37:01.000Z</published>
    <updated>2019-01-31T21:37:11.810Z</updated>
    
    <content type="html"><![CDATA[<p>Over the past couple of months we’ve been busy maintaining <a href="https://paraio.org" target="_blank" rel="noopener">Para</a> and <a href="https://scoold.com" target="_blank" rel="noopener">Scoold</a> and a few patches have been released. The changes are minor and are mostly related to dependency upgrades. A few minor bugs have been fixed as well. Scoold has received some much welcome pull requests with translations from our awesome contributors. It is now available in 12 different languages! </p><a id="more"></a><p><img src="/assets/img/blogpost_media12.png" alt></p><p>Last year came the release of Java 11 and we’re quite happy to announce that both Scoold and Para are fully compatible with JDK 11. This required that we upgrade most of the dependencies like Spring and Guice, for example. </p><p>The latest release of Para is <code>1.31.1</code> and it contains a number of fixes. The code responsible for authenticatingusers with LinkedIn has been updated and it’s now compatible with their latest API v2.0. We recommend that you update your Para server to 1.31.1` if you’re using LinkedIn.</p><p>SAML authentication has been a desired feature for some time so we’ve implemented it as part of the Para backend.Hence, <a href="https://www.scoold.com/" target="_blank" rel="noopener">Scoold PRO</a> and all Para clients can take advantage of that and authenticate users through any given SAML IDP. This, coupled with existing LDAP support, makes it effortless for enterprise customersto integrate their own identity provider with Para and Scoold.</p><p>The latest release of Scoold is <code>1.31.2</code>. The cookie security has been tightened with the addition of the new <code>SameSite</code> flag which is supposed to completely mitigate the risk of a possible CSRF attack. For better protectionagainst XSS attacks, we’ve also upgraded the template engine, Velocity, to 2.0. </p><p>Scoold now comes in a WAR package as well. This makes it easy to deploy on a servlet container such as Apache Tomcat.The JAR package is more appropriate for deploying Scoold to hosts without a servlet container, as it includes aninstance of the embedded Jetty server. This is the case for Heroku, for example.</p><p>Apart from Heroku, we’ve added support and documentation for lots of other deployment options — AWS, Azure, DigitalOcean and Google App Engine. Not only that, but we’ve added a new <code>helm/</code> folder with a Helm chart for thoseof you who want to deploy Scoold to a Kubernetes cluster with a single command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm install --name my-scoold ./scoold</span><br></pre></td></tr></table></figure><p>Read the <a href="https://github.com/Erudika/scoold/tree/master/helm" target="_blank" rel="noopener">Scoold chart README</a> for more details on how to configure the pod.</p><p>Para does not yet include a Helm chart because it has lots of different database combinations and it’s hard to choosethe best option for everyone. It is available on Docker Hub and so is Scoold. To run a Para server locally withDocker, simply run:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -ti -p 8080:8080 --rm -v para-data:/para/data \</span><br><span class="line">  -v $(pwd)/application.conf:/para/application.conf \</span><br><span class="line">  -e JAVA_OPTS=&quot;-Dconfig.file=/para/application.conf&quot; erudikaltd/para</span><br></pre></td></tr></table></figure><p>To run just Scoold locally, try:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -ti -p 8000:8000 --rm -v $(pwd)/application.conf:/scoold/application.conf \</span><br><span class="line">  -e JAVA_OPTS=&quot;-Dconfig.file=/scoold/application.conf&quot; erudikaltd/scoold</span><br></pre></td></tr></table></figure><p>Or, to run both Para and Scoold locally with Docker use the <code>docker-compose</code> command from inside the Scoold folder:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><p>Each release of Para and Scoold has a tag and that tag is reflected on Docker Hub. So you can fetch a particular tag andrun that, or use the <code>:latest</code> tag which contains the most recent updates from the <code>master</code> branch. You can see all the containers available on <a href="https://hub.docker.com/u/erudikaltd" target="_blank" rel="noopener">our Docker Hub page</a>, which includes all the Para pluginsas well.</p><h2 id="Lucene-S3-Directory"><a href="#Lucene-S3-Directory" class="headerlink" title="Lucene S3 Directory"></a>Lucene S3 Directory</h2><p>Finally, we’d like to announce the availability of a new experimental project called <a href="https://github.com/albogdano/lucene-s3directory" target="_blank" rel="noopener">lucene-s3directory</a>. It’s a <code>Directory</code> implementation for ApacheLucene which allows you to store your indices directly on AWS S3. This has been attempted before by Shay Banon (creator of Elasticsearch and Compass) but he later abandoned the project because S3 didn’t have support for locks back then.Since late 2018, S3 now supports two different types of locks on objects - legal hold locks and retention periods. The <code>S3Directory</code> implementation uses legal hold locks on <code>write.lock</code> files. </p><p>The project passes the integration tests but it might still contain some bugs. We’d really appreciate it if you take itfor a spin and report any issues on <a href="https://github.com/albogdano/lucene-s3directory/issues" target="_blank" rel="noopener">GitHub</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Over the past couple of months we’ve been busy maintaining &lt;a href=&quot;https://paraio.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Para&lt;/a&gt; and 
&lt;a href=&quot;https://scoold.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Scoold&lt;/a&gt; and a few patches have been released. The changes are minor and are mostly related 
to dependency upgrades. A few minor bugs have been fixed as well. Scoold has received some much welcome pull 
requests with translations from our awesome contributors. It is now available in 12 different languages! &lt;/p&gt;
    
    </summary>
    
    
    
      <category term="release" scheme="https://erudika.com/blog/tags/release/"/>
    
      <category term="para" scheme="https://erudika.com/blog/tags/para/"/>
    
      <category term="scoold" scheme="https://erudika.com/blog/tags/scoold/"/>
    
      <category term="docker" scheme="https://erudika.com/blog/tags/docker/"/>
    
      <category term="kubernetes" scheme="https://erudika.com/blog/tags/kubernetes/"/>
    
      <category term="helm" scheme="https://erudika.com/blog/tags/helm/"/>
    
      <category term="lucene" scheme="https://erudika.com/blog/tags/lucene/"/>
    
  </entry>
  
  <entry>
    <title>Top 5 open source Q&amp;A platforms for 2020</title>
    <link href="https://erudika.com/blog/2018/12/30/Top-5-open-source-Q-A-platforms/"/>
    <id>https://erudika.com/blog/2018/12/30/Top-5-open-source-Q-A-platforms/</id>
    <published>2018-12-30T09:51:40.000Z</published>
    <updated>2020-02-25T11:57:10.353Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve assembled a list of the top open source Q&amp;A platforms that are currently available. The list containsonly projects which are in <strong>active development</strong> and have a working demo site. There are a few similar blogposts out there but they’re quite outdated. Most of the projects listed below are inspired by Stack Overflowwhich is in fact the most popular community for questions and answers related to programming. Please, bearin mind that <strong>the list is not ordered in any way</strong>.</p><a id="more"></a><p><img src="/assets/img/blogpost_media11.png" alt></p><h2 id="Discourse"><a href="#Discourse" class="headerlink" title="Discourse - "></a>Discourse - <a href="https://github.com/discourse/discourse" target="_blank" rel="noopener"><i class="fa fa-github-square"></i></a></h2><p><img src="/assets/img/discourse.png" alt></p><p><strong>Website:</strong> <a href="https://www.discourse.org" target="_blank" rel="noopener">https://www.discourse.org</a><br><strong>Language:</strong> Ruby, Rails <br><strong>Database:</strong> PostgreSQL<br><strong>License:</strong> GPL 2 <br><strong>Commercial support:</strong> <a href="https://www.discourse.org" target="_blank" rel="noopener">Yes</a><br><strong>Demo:</strong> <a href="https://try.discourse.org" target="_blank" rel="noopener">https://try.discourse.org</a><br></p><h2 id="Scoold"><a href="#Scoold" class="headerlink" title="Scoold - "></a>Scoold - <a href="https://github.com/erudika/scoold" target="_blank" rel="noopener"><i class="fa fa-github-square"></i></a></h2><p><img src="/assets/img/scoold3.png" alt></p><p><strong>Website:</strong> <a href="https://scoold.com" target="_blank" rel="noopener">https://scoold.com</a><br><strong>Language:</strong> Java, Spring<br><strong>Database:</strong> Any (database agnostic)<br><strong>License:</strong> Apache 2.0<br><strong>Commercial support:</strong> <a href="https://erudika.com">Yes</a><br><strong>Demo:</strong> <a href="https://live.scoold.com" target="_blank" rel="noopener">https://live.scoold.com</a><br></p><h2 id="Askbot"><a href="#Askbot" class="headerlink" title="Askbot - "></a>Askbot - <a href="https://github.com/ASKBOT/askbot-devel" target="_blank" rel="noopener"><i class="fa fa-github-square"></i></a></h2><p><img src="/assets/img/askbot.png" alt></p><p><strong>Website:</strong> <a href="https://askbot.com" target="_blank" rel="noopener">https://askbot.com</a><br><strong>Language:</strong> Python, Django <br><strong>Database:</strong> MySQL, PostgreSQL<br><strong>License:</strong> GPL 3<br><strong>Commercial support:</strong> <a href="https://askbot.com/hire-us/" target="_blank" rel="noopener">Yes</a><br><strong>Demo:</strong> <a href="https://askbot.org/en/questions" target="_blank" rel="noopener">https://askbot.org/en/questions</a><br></p><h2 id="Vanilla"><a href="#Vanilla" class="headerlink" title="Vanilla - "></a>Vanilla - <a href="https://github.com/vanilla/vanilla" target="_blank" rel="noopener"><i class="fa fa-github-square"></i></a></h2><p><img src="/assets/img/vanilla.png" alt></p><p><strong>Website:</strong> <a href="https://open.vanillaforums.com/" target="_blank" rel="noopener">https://open.vanillaforums.com</a><br><strong>Language:</strong> PHP <br><strong>Database:</strong> MySQL <br><strong>License:</strong> GPL 2 <br><strong>Commercial support:</strong> <a href="https://vanillaforums.com/en/" target="_blank" rel="noopener">Yes</a><br><strong>Demo:</strong> <a href="https://open.vanillaforums.com/" target="_blank" rel="noopener">https://open.vanillaforums.com</a><br></p><h2 id="Question2Answer"><a href="#Question2Answer" class="headerlink" title="Question2Answer - "></a>Question2Answer - <a href="https://github.com/q2a/question2answer" target="_blank" rel="noopener"><i class="fa fa-github-square"></i></a></h2><p><img src="/assets/img/q2a.png" alt></p><p><strong>Website:</strong> <a href="https://www.question2answer.org" target="_blank" rel="noopener">https://www.question2answer.org</a><br><strong>Language:</strong> PHP <br><strong>Database:</strong> MySQL<br><strong>License:</strong> GPL 2<br><strong>Commercial support:</strong> <a href="https://docs.question2answer.org/services/" target="_blank" rel="noopener">Yes</a><br><strong>Demo:</strong> <a href="https://www.question2answer.org/qa/" target="_blank" rel="noopener">https://www.question2answer.org/qa/</a><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I’ve assembled a list of the top open source Q&amp;amp;A platforms that are currently available. The list contains
only projects which are in &lt;strong&gt;active development&lt;/strong&gt; and have a working demo site. There are a few similar blog
posts out there but they’re quite outdated. Most of the projects listed below are inspired by Stack Overflow
which is in fact the most popular community for questions and answers related to programming. Please, bear
in mind that &lt;strong&gt;the list is not ordered in any way&lt;/strong&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="scoold" scheme="https://erudika.com/blog/tags/scoold/"/>
    
      <category term="stackoverflow" scheme="https://erudika.com/blog/tags/stackoverflow/"/>
    
      <category term="open-source" scheme="https://erudika.com/blog/tags/open-source/"/>
    
  </entry>
  
  <entry>
    <title>Announcing Scoold Pro</title>
    <link href="https://erudika.com/blog/2018/10/15/Announcing-Scoold-Pro/"/>
    <id>https://erudika.com/blog/2018/10/15/Announcing-Scoold-Pro/</id>
    <published>2018-10-15T19:45:34.000Z</published>
    <updated>2018-11-02T08:33:04.208Z</updated>
    
    <content type="html"><![CDATA[<p><strong>We are happy to announce the availability of Scoold Pro!</strong> We’ve added a number of useful features to it and made it easier for integration with your existing infrastructure. Scoold Pro fits well inside an enterprise environment and can also be hosted on your company’s intranet. SAML authentication allows for a faster onboarding and unlimited spaces give you the freedom to assign a separate space to each one of your teams within your organization.</p><a id="more"></a><p><img src="https://erudika.com/assets/img/blogpost_media10.png" alt></p><p>Scoold was launched more than a year ago and so far has been quite successful as Stack Overflow clone. It quickly became one of the <a href="https://meta.stackexchange.com/questions/2267/stack-exchange-clones" target="_blank" rel="noopener">top open source SO clones out there</a>.</p><p><img src="https://erudika.com/assets/img/pro_i18n.png" alt></p><p>People from all around the world deploying Scoold in production and it got a few hundred stars on GitHub (thanks!). Also our generous contributors have translated Scoold in more than 10 languages, including Chinese and Hindi.</p><h2 id="Development-in-the-past-year"><a href="#Development-in-the-past-year" class="headerlink" title="Development in the past year"></a>Development in the past year</h2><p>In the past year we were busy adding features to the open source version and we have fixed a ton of issues and improved the documentation. Scoold is now on <a href="https://hub.docker.com/r/erudikaltd/scoold/" target="_blank" rel="noopener">Docker</a> and it’s really easy to get it up and running quickly. The most notable features were “Spaces” and LDAP authentication support. Spaces are essentially isolated groups where people can ask/answer questions which are relevant only to that specific group. For example, we could create a space called “Dev team” and add all our software developers to it. The best part of this is that spaces are free! Most of the SO clones will charge your for this feature and in Scoold it’s open source and available to everyone.</p><p>LDAP support was also in high demand so we implemented it in both <a href="https://paraio.org" target="_blank" rel="noopener">Para</a> and Scoold. It’s now possible to connect to your existing LDAP directory and sign in users effortlessly. Active Directory is also supported. Additionally, we’ve implemented OAuth 2.0 authentication so that your users can login through any OAuth/OpenID Connect identity provider.</p><p>As feature requests started piling up, we decided to release a paid version and continue adding new features to it. Both the open source and paid versions will continue to be actively maintained and developed in parallel. The pricing model for Scoold Pro is quite straightforward and we don’t care how many users you have. We charge a one-time fee for 1 year of updates, per server.</p><p>So, let’s go over the Pro features.</p><h2 id="Sticky-Favorite-posts"><a href="#Sticky-Favorite-posts" class="headerlink" title="Sticky / Favorite posts"></a>Sticky / Favorite posts</h2><p><img src="https://erudika.com/assets/img/pro_favs.png" alt></p><p>These are two small features so we combined them into one. Sticky posts are a useful little feature which allows you to highlight important questions and announcements. This feature is typically found in forum software and basically “pins” a post to the top of the page. You can also “like” any question which adds it to your favorites so that you can later go back to that question quickly.</p><h2 id="SAML-support"><a href="#SAML-support" class="headerlink" title="SAML support"></a>SAML support</h2><p><img src="https://erudika.com/assets/img/pro_saml.png" alt></p><p>This is an enterprise feature allow Scoold to talk to your corporate identity servers enabling people to login with SAML. Scoold acts as a service provider (SP) for your identity provider (IDP). There are quite a few options to configure here so you must know what you’re doing.</p><h2 id="Anonymous-posts"><a href="#Anonymous-posts" class="headerlink" title="Anonymous posts"></a>Anonymous posts</h2><p>Anonymous posts are useful if you want to make onboarding easier. It lowers the barrier for new users and increases engagement. When enabled, new users will be able to ask and answer questions without a registration. On such anonymous posts, the author is displayed as “Anonymous”. This feature is disabled by default.</p><h2 id="Unlimited-spaces"><a href="#Unlimited-spaces" class="headerlink" title="Unlimited spaces"></a>Unlimited spaces</h2><p>Spaces are normally limited to 10, but in Pro this limit goes away. You can assign a space to each team or department in your organization. By default there’s a public “default” space where all questions go. When you create a new space and assign users to it they will still see all the other questions when they switch to the “default” space.</p><h2 id="Multiple-admins-and-identity-domains"><a href="#Multiple-admins-and-identity-domains" class="headerlink" title="Multiple admins and identity domains"></a>Multiple admins and identity domains</h2><p>You are no longer limited to a single admin user. Administrators can also promote anyone to become an admin or a moderator. You can also specify all your company domains in the configuration and restrict new registrations to users with emails only from those whitelisted domains.</p><h2 id="Advanced-syntax-highlighting"><a href="#Advanced-syntax-highlighting" class="headerlink" title="Advanced syntax highlighting"></a>Advanced syntax highlighting</h2><p><img src="https://erudika.com/assets/img/pro_syntax.png" alt></p><p>The syntax highlighting of code snippets has been enhanced and supports additional languages like LaTeX, Velocity, WebAssembly, JSX/TSX and PL/SQL. MathJax integration is also available by turning on its feature flag.</p><h2 id="Image-uploads"><a href="#Image-uploads" class="headerlink" title="Image uploads"></a>Image uploads</h2><p>With image uploads, people can upload screenshots and embed them in their posts. Uploaded image files can have maximum size of 2 MB. Image uploads are handled by Imgur. In the future, more upload services could be supported such as S3. To initiate a new image upload, open up the Markdown editor and drag’n’drop the image you want to upload. A link will automatically appear when the upload is finished. For this feature to work correctly you have to specify your Imgur API client ID.</p><h2 id="Security-notifications"><a href="#Security-notifications" class="headerlink" title="Security notifications"></a>Security notifications</h2><p>Scoold has had a strict Content Security Policy and reports since the very beginning. In Pro we’ve taken this a step further and added email notifications for admins. Administrators and moderators will receive an email when a new report comes in. They can also receive an email report each time the Content Security Policy (CSP) gets violated.</p><p>Scoold Pro is available for purchase from <a href="https://scoold.com" target="_blank" rel="noopener">scoold.com</a>. It’s <em>299 EUR, one-time fee</em> so you can buy it once and host it on one of your servers indefinitely. You’re also eligible for free updates and fixes for a period of 1 year. Buying Pro would also support the development of Scoold in general. Cheers!</p><p><em>Want to give Scoold a try? Go to <a href="https://live.scoold.com" target="_blank" rel="noopener">live.scoold.com</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;We are happy to announce the availability of Scoold Pro!&lt;/strong&gt; We’ve added a number of useful features to it and made it easier for integration with your existing infrastructure. Scoold Pro fits well inside an enterprise environment and can also be hosted on your company’s intranet. SAML authentication allows for a faster onboarding and unlimited spaces give you the freedom to assign a separate space to each one of your teams within your organization.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="release" scheme="https://erudika.com/blog/tags/release/"/>
    
      <category term="scoold" scheme="https://erudika.com/blog/tags/scoold/"/>
    
      <category term="enterprise" scheme="https://erudika.com/blog/tags/enterprise/"/>
    
  </entry>
  
  <entry>
    <title>Introducing Scoold - an open source Q&amp;A platform</title>
    <link href="https://erudika.com/blog/2017/04/27/Introducing-Scoold-an-open-source-Q-and-A-platform/"/>
    <id>https://erudika.com/blog/2017/04/27/Introducing-Scoold-an-open-source-Q-and-A-platform/</id>
    <published>2017-04-27T05:48:28.000Z</published>
    <updated>2017-04-26T23:22:38.463Z</updated>
    
    <content type="html"><![CDATA[<p>Have you ever wanted to have a Q&amp;A section on your website with the functionality of Stack Overflow? Well, this one is for you! Scoold is a cloud-ready Stack Overflow clone, powered by our Para backend. It’s a real-world application, showcasing the Para technology and how it can be utilized to get a project off the ground quickly. Scoold is a lightweight (~4000 LOC) web application written in Java – it runs great on the smallest Heroku dyno and doesn’t require a database. </p><a id="more"></a><p><img src="https://erudika.com/assets/img/blogpost_media9.png" alt></p><h1 id="A-brief-history-of-Scoold"><a href="#A-brief-history-of-Scoold" class="headerlink" title="A brief history of Scoold"></a>A brief history of Scoold</h1><p>I started the project back in 2008. Initially, the idea was to build a social network for schools. Yeah, I know, another Facebook, right? Kinda. The project was already in development around the time when Stack Overflow (SO) launched and I was really inspired by it. In the beginning SO was just this one website and had no themed versions of itself, so I decided to build a version of it for students and teachers, instead of programmers. The project was unsucessful but it gave birth to another project which is now known as <a href="https://paraio.org" target="_blank" rel="noopener">Para</a>. Scoold’s backend code was extracted to a separate library, refactored and published on GitHub and Maven. </p><p>So, for the past few years I was busy developing Para, while Scoold just sat there on my hard drive, doing nothing. I knew it could be useful to somebody and I started refactoring and modernizing it, in January. By mid-February it was out on <a href="https://github.com/Erudika/scoold" target="_blank" rel="noopener">GitHub</a> and redeployed on Heroku (previously it ran on EC2). I’ve reduced the code significantly by removing old features and just focused on making it work like Stack Overflow. </p><h1 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h1><p>So, what can you do on Scoold? It implements most the SO features – you can ask and answer questions, upvote and downvote posts, earn badges and reputation. Each edit creates an new revision, making it easy to follow the history of edits. The posts can be written in Markdown, which is then rendered by Para to HTML.The reputation system is simple but effective. People are awarded reputation points for good questions and answers, as well as various badges for their achievements on the site. Not all badges found on SO are implemented, though. </p><p><img src="https://erudika.com/assets/img/scoold.png" alt></p><p>When posting a question, you can attach a location to it – a nifty feature which is <em>not</em> implemented on Stack Overflow. This allows you to filter questions based on their location, making it easy to find those that have been asked in your region. Geolocation queries are implemented through the Elasticsearch <code>geo_point</code> data type. </p><p><img src="https://erudika.com/assets/img/scoold1.png" alt></p><p>You can search for anything on Scoold because each post is indexed and analyzed by Elasticsearch – a powerful search engine. You can easily find users, questions and answers from the search bar on top. The search results are paginated, each page showing 30 results (this can be changed in the config file).</p><p><img src="https://erudika.com/assets/img/scoold2.png" alt></p><p>I really wanted to keep things simple on the frontend – a classic, light frontend with jQuery works fine. Scoold used jQuery from the very beginning, and the trusted JavaScript library is still very useful today. It takes care of all theAJAX requests and toggles a bunch of elements on the screen, nothing more. Everything is rendered on the server, just like in the good old days. The content is easily crawlable by search engines which is great for SEO and the URLs are pretty tidy, too.</p><p>The design has been completely revamped to have a clean and modern look. The frontend code uses Materialize CSS – a framework based on Google’s Material Design Lite. It’s responsive and beautiful. Icons are from FontAwesome. On your profile page you can choose your own picture of use your Gravatar. Logging in is quick, without registration forms or passwords. Initially, Facebook and Google are supported as identity providers, but others are also available, like Microsoft, Twitter and Github (supported by Para). </p><h1 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h1><p>Scoold, is ready for cloud deployment and can run on any cloud infrastructure or on your own servers. Currently, it runs on Heroku. You can simply click the ‘Deploy to Heroku’ button below and get up-and-running in minutes. It is a single JAR file (generated by Spring Boot) that is executed like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dserver.port=$PORT -jar target/scoold*.jar</span><br></pre></td></tr></table></figure><p>There are a few environment variables that need to be set before deployment. You can find these under the “Settings” tab for your application, click “Reveal Config Vars”.The most important ones are these:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">para_endpoint = &quot;https://paraio.com&quot;</span><br><span class="line">para_access_key = &quot;app:scoold&quot;</span><br><span class="line">para_secret_key = &quot;*****************&quot;</span><br><span class="line">para_fb_app_id = &quot;123456789&quot;</span><br><span class="line">para_fb_secret = &quot;***********************&quot;</span><br><span class="line">para_gmaps_api_key = &quot;********************************&quot;</span><br><span class="line">para_google_client_id = &quot;********************************</span><br><span class="line">para_google_analytics_id = &quot;UA-123456-7&quot;</span><br></pre></td></tr></table></figure><p>Scoold needs to know the location of a Para server, and to connect, you need your app’s access key and secret key (see <a href="https://paraio.org/docs" target="_blank" rel="noopener">Para docs</a>). </p><p><a href="https://heroku.com/deploy?template=https://github.com/Erudika/scoold" target="_blank" rel="noopener"><img src="https://www.herokucdn.com/deploy/button.svg" alt=" click here to deploy "></a></p><p><strong>The website of the project is <a href="https://scoold.com" target="_blank" rel="noopener">https://scoold.com</a>, and the live demo is at <a href="https://live.scoold.com" target="_blank" rel="noopener">https://live.scoold.com</a>.</strong></p><p><em>You can follow Scoold <a href="https://twitter.com/getscoold" target="_blank" rel="noopener">on Twitter</a> or chat with us about it <a href="https://gitter.im/Erudika/scoold" target="_blank" rel="noopener">on Gitter</a>.</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Have you ever wanted to have a Q&amp;amp;A section on your website with the functionality of Stack Overflow? Well, this one is for you! Scoold is a cloud-ready Stack Overflow clone, powered by our Para backend. It’s a real-world application, showcasing the Para technology and how it can be utilized to get a project off the ground quickly. Scoold is a lightweight (~4000 LOC) web application written in Java – it runs great on the smallest Heroku dyno and doesn’t require a database. &lt;/p&gt;
    
    </summary>
    
    
    
      <category term="scoold" scheme="https://erudika.com/blog/tags/scoold/"/>
    
      <category term="stackoverflow" scheme="https://erudika.com/blog/tags/stackoverflow/"/>
    
      <category term="clone" scheme="https://erudika.com/blog/tags/clone/"/>
    
  </entry>
  
  <entry>
    <title>Implementing full-text search for your static site</title>
    <link href="https://erudika.com/blog/2016/12/12/Implementing-full-text-search-for-your-static-site/"/>
    <id>https://erudika.com/blog/2016/12/12/Implementing-full-text-search-for-your-static-site/</id>
    <published>2016-12-12T14:48:29.000Z</published>
    <updated>2017-12-07T14:15:46.034Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Static site generators are great</strong> — they get the job done quickly for our blogs, landing pages and project websites.They make it easy to build something, deploy it and forget it — free hosting, nothing to maintain, a sort of “serverless”technology. Static sites are perfect for content which rarely changes. They lack dynamic features, but the main problemis that you can’t search quickly for a piece of content without leaving the site, which hinders the user experience.</p><p>We generate our blog using Hexo, a simple static site generator, and we’re quite happy with it. We’ve always felt thatour search box could be improved and sending users off to Google was just sloppy. In this tutorial, I’ll show you howyou can also upgrade the search box on your blog or static site.</p><a id="more"></a><p><img src="https://erudika.com/assets/img/blogpost_media8.png" alt></p><p>So we have a bunch of HTML files generated for our site and we need them indexed somewhere so we can query them later.The search box will send AJAX requests to the search API and presents the results to the user — very simple setup.So we’ll need three things:</p><ol><li>a tool for quickly indexing our content;</li><li>a full-text search API, preferably one that is free;</li><li>some JavaScript code to call the API and show the results.</li></ol><p>Currently, there are several solutions for implementing full-text search. Depending on the time and money you arewilling to spend, you could either host your own search server, like Elasticsearch or Solr, or pay for a service likeAlgolia. Now, for something as simple as a blog with ten articles in it, paying for servers or a monthly subscriptionfee is a bit excessive. This is where <a href="https://paraio.com" target="_blank" rel="noopener">Para</a> comes in — our flexible, open-source backend service.It’s absolutely free for developers and the search functionality inside of it is <strong>powered by Elasticsearch</strong> — <em>sweet!</em></p><p>Initially, when we started with this task we didn’t have the tool for indexing our blog posts and this lead to uswriting <a href="https://github.com/Erudika/para-cli" target="_blank" rel="noopener">para-cli</a> — a command-line tool for working with our Para backend server.It’s written in JavaScript for Node.js and it’s really simple to use. Let’s go ahead and install it:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g para-cli</span><br><span class="line"># run setup and set endpoint to either &apos;http://localhost:8080&apos; or &apos;https://paraio.com&apos;</span><br><span class="line">$ para-cli setup</span><br></pre></td></tr></table></figure><p>Now you can see all the options by typing <code>para-cli</code> in the console. There are several basic commands for reading,writing and deleting objects and one for search. For now, we’re only interested in the <code>create</code> command.</p><p>Go over to <a href="https://paraio.com/signin" target="_blank" rel="noopener">ParaIO.com</a> and sign in to get a free account, if you don’t have one already.Next, we’ll create a new app where we can store our blog posts. If you already have an existing app with some objectsin it, you can still fit in the content of your site by using objects of a different type, like <code>blogpost</code>.</p><p><img src="https://erudika.com/assets/img/ftsearch1.png" alt></p><p>Take a note of your Para access and secret keys, we’ll need them for our CLI tool. Now it’s time to gather our HTMLfiles and send them to Para for indexing.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ para-cli create &quot;blog/20*/**/*.html&quot; --type &quot;blogpost&quot; --sanitize \</span><br><span class="line">--accessKey &quot;app:myapp&quot; --secretKey &quot;[key]&quot;</span><br></pre></td></tr></table></figure><p><img src="https://erudika.com/assets/img/ftsearch2.png" alt></p><p>In our case, HTML files are located in a folder called ‘blog’ with subfolders for each year. The CLI tool will parseevery HTML file and look for the these two tags:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:title"</span> <span class="attr">content</span>=<span class="string">"…"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:url"</span> <span class="attr">content</span>=<span class="string">"…"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Most static site generators, like Octopress and Hexo, automatically include these tags in the code. We’ll also wantto index newly published blog posts, so we can simply execute the command above again and everything will be in sync.If all went well, we should now have all our content indexed and ready. Let’s test it by sending a search query:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ para-cli search &quot;some keyword&quot; --accessKey &quot;app:myapp&quot; --secretKey &quot;[key]&quot;</span><br></pre></td></tr></table></figure><p>This should return the results in as an array of JSON objects. Awesome! Now, in order for our client-side JavaScriptwidget to be able to be able to access the Para search API without a secret key, we’ll have to allow public access tothe <code>blogposts</code> resource.</p><p><img src="https://erudika.com/assets/img/ftsearch3.png" alt></p><p>The search box in our case is implemented with good old jQuery and a plugin called<a href="https://twitter.github.io/typeahead.js/" target="_blank" rel="noopener">typehead.js</a>. The code is very simple — it calls the search API and queriesobjects of type <code>blogpost</code>. The results are in the form of a JSON object with several properties but we’re onlyinterested in the objects found so we transform it into an <code>Array</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> APPID = <span class="string">"app:myapp"</span>;</span><br><span class="line"><span class="keyword">var</span> ENDPOINT = <span class="string">"https://paraio.com/v1"</span>;</span><br><span class="line"></span><br><span class="line">$.ajaxSetup(&#123;</span><br><span class="line">  headers: &#123;<span class="string">'Authorization'</span>: <span class="string">'Anonymous '</span> + APPID&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> blogposts = <span class="keyword">new</span> Bloodhound(&#123;</span><br><span class="line">  datumTokenizer: Bloodhound.tokenizers.whitespace,</span><br><span class="line">  queryTokenizer: Bloodhound.tokenizers.whitespace,</span><br><span class="line">  remote: &#123;</span><br><span class="line">    url: ENDPOINT + <span class="string">'/blogposts?q=%QUERY'</span>,</span><br><span class="line">    wildcard: <span class="string">'%QUERY'</span>,</span><br><span class="line">    transform: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> res.items || [];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#search-box'</span>).typeahead(&#123;</span><br><span class="line">  hint: <span class="literal">false</span>,</span><br><span class="line">  highlight: <span class="literal">true</span>,</span><br><span class="line">  minLength: <span class="number">3</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  name: <span class="string">'blogposts'</span>,</span><br><span class="line">  source: blogposts,</span><br><span class="line">  templates: &#123;</span><br><span class="line">    notFound: <span class="string">'&lt;i&gt;No results.&lt;/i&gt;'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  display: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> result.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#search-box'</span>).bind(<span class="string">'typeahead:select'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ev, result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.location = result.url || <span class="string">''</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Finally we add some CSS styling to make our widget look good. Some of these classes are typehead.js specific but canalso be modified.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#search-box</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.4em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tt-menu</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">2px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tt-suggestion</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tt-suggestion</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> dashed <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.4em</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tt-suggestion</span><span class="selector-class">.tt-cursor</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#0097cf</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.twitter-typeahead</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Final-result"><a href="#Final-result" class="headerlink" title="Final result"></a>Final result</h2><p><em>That’s it!</em> You can try out the finished thing at the top of this page, above the title.We chose jQuery just because it was already included in our HTML code but you can just as easily achieve the sameresult with other JS frameworks like Angular or React.</p><p><em>If you liked this post, you can also follow us <a href="https://twitter.com/erudika" target="_blank" rel="noopener">on Twitter</a> or chat with us<a href="https://gitter.im/Erudika/para" target="_blank" rel="noopener">on Gitter</a>.</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Static site generators are great&lt;/strong&gt; — they get the job done quickly for our blogs, landing pages and project websites.
They make it easy to build something, deploy it and forget it — free hosting, nothing to maintain, a sort of “serverless”
technology. Static sites are perfect for content which rarely changes. They lack dynamic features, but the main problem
is that you can’t search quickly for a piece of content without leaving the site, which hinders the user experience.&lt;/p&gt;
&lt;p&gt;We generate our blog using Hexo, a simple static site generator, and we’re quite happy with it. We’ve always felt that
our search box could be improved and sending users off to Google was just sloppy. In this tutorial, I’ll show you how
you can also upgrade the search box on your blog or static site.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="search" scheme="https://erudika.com/blog/tags/search/"/>
    
      <category term="blog" scheme="https://erudika.com/blog/tags/blog/"/>
    
      <category term="para-cli" scheme="https://erudika.com/blog/tags/para-cli/"/>
    
  </entry>
  
  <entry>
    <title>Saving money on DynamoDB with Global Secondary Indexes</title>
    <link href="https://erudika.com/blog/2016/11/21/Saving-money-on-DynamoDB-with-Global-Secondary-Indexes/"/>
    <id>https://erudika.com/blog/2016/11/21/Saving-money-on-DynamoDB-with-Global-Secondary-Indexes/</id>
    <published>2016-11-21T15:39:07.000Z</published>
    <updated>2017-01-31T20:16:48.490Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Amazon’s DynamoDB</strong> is a fully managed database service running inside the AWS cloud which is super-scalable and fast. It is perfect for write-intensive workflows and low-latency queries. Its main advantages are the adjustable read and write performance and global secondary indexes (GSI).</p><p>We migrated from Cassandra to DynamoDB a while back. This decision was taken mainly because of the tunable performance and also because it’s a managed service and we had one less thing to maintain. Later we found out that global indexes could help us save a lot of extra costs and so we implemented a simple solution, which we call “shared tables”.</p><a id="more"></a><p><img src="https://erudika.com/assets/img/blogpost_media7.png" alt></p><p>Our solution is applicable to cases where you have a large number of Dynamo tables but each of these has a low utilization. For example, it may contain a few hundred items and have low throughput capacity of 1 read and 1 write per second. The idea is to combine those tables into one and save some money. First, let’s look at this neat ASCII diagram of what we have so far.</p><pre> +-----+ +-----+ +-----+     +-----+ | id1 | | id3 | | id5 |     | idX | +-----+ +-----+ +-----+ ... +-----+ | id2 | | id4 | | id6 |     | idY | +-----+ +-----+ +-----+     +-----+ Table 1 Table 2 Table 3     Table N</pre><p>We are going to create a new table called <code>shared</code> and also we’ll have to create the global secondary index to that table which is treated like a separate table. We can do this through the console or by calling the AWS SDK.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">createSharedTable</span><span class="params">(String sharedTableName, <span class="keyword">long</span> readCapacity, <span class="keyword">long</span> writeCapacity)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (existsTable(sharedTableName)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// build the GSI request</span></span><br><span class="line">    GlobalSecondaryIndex secIndex = <span class="keyword">new</span> GlobalSecondaryIndex().</span><br><span class="line">        withIndexName(sharedTableName + <span class="string">"-index"</span>).</span><br><span class="line">        withProvisionedThroughput(<span class="keyword">new</span> ProvisionedThroughput().</span><br><span class="line">            withReadCapacityUnits(<span class="number">1L</span>).</span><br><span class="line">            withWriteCapacityUnits(<span class="number">1L</span>)).</span><br><span class="line">        withProjection(<span class="keyword">new</span> Projection().withProjectionType(ProjectionType.ALL)).</span><br><span class="line">        withKeySchema(<span class="keyword">new</span> KeySchemaElement().withAttributeName(<span class="string">"tableID"</span>).withKeyType(KeyType.HASH),</span><br><span class="line">            <span class="keyword">new</span> KeySchemaElement().withAttributeName(<span class="string">"timestamp"</span>).withKeyType(KeyType.RANGE));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create the shared table with the above GSI attached</span></span><br><span class="line">    getClient().createTable(<span class="keyword">new</span> CreateTableRequest().withTableName(sharedTableName).</span><br><span class="line">        withKeySchema(<span class="keyword">new</span> KeySchemaElement(Config._KEY, KeyType.HASH)).</span><br><span class="line">        withAttributeDefinitions(<span class="keyword">new</span> AttributeDefinition(Config._KEY, ScalarAttributeType.S),</span><br><span class="line">            <span class="keyword">new</span> AttributeDefinition(<span class="string">"tableID"</span>, ScalarAttributeType.S),</span><br><span class="line">            <span class="keyword">new</span> AttributeDefinition(<span class="string">"timestamp"</span>, ScalarAttributeType.S)).</span><br><span class="line">        withGlobalSecondaryIndexes(secIndex).</span><br><span class="line">        withProvisionedThroughput(<span class="keyword">new</span> ProvisionedThroughput(readCapacity, writeCapacity)));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    logger.error(<span class="string">"Failed to create shared table."</span>, e);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>First we make a GSI request object by specifying its throughput — 1 read/1 write is sufficient as a starting point. This setting is determined by the number of queries (per second) to the database. Then we specify the attributes which will be copied over to the secondary index (all in this case). This allows us to retrieve the data from the index directly instead of getting just the <code>id</code> from the index then reading the actual object from the <code>shared</code> table as a second request. Finally, and most importantly, we need to set the attributes on which the index is defined — these will be <code>tableID</code> and <code>timestamp</code>. Going back to the first diagram, each table name will correspond to a <code>tableID</code> in the <code>shared</code> table. This will be the attribute which splits up the big table into smaller subtables (i.e. views). The <code>timestamp</code> field is used for sorting and is the so called “range” component of our index.</p><p>The result of the above request is going to be the table <code>shared</code> and the index <code>shared-index</code>.</p><pre>  WRITE TO +          READ FROM ^           |                    |  +--------v---+      +---------+--+  | table1_id1 |      | table1_id1 |  +------------+      +------------+  | table2_id3 |      | table1_id2 |  +------------+      +------------+  | table3_id5 |      | table2_id3 |  +------------+      +------------+  | table1_id2 |      | table2_id4 |  +------------+      +------------+  | table2_id4 +------+ table3_id5 |  +------------+      +------------+  | table3_id6 |      | table3_id6 |  +------------+      +------------+  |   . . .    |      |   . . .    |  +------------+      +------------+  | tableN_idX |      | tableN_idX |  +------------+      +------------+  | tableN_idY |      | tableN_idY |  +------------+      +------------+      shared           shared-index</pre><p>The next important decision will be the format of the primary key in the <code>shared</code> table. We’ve decided to go for <code>tableID_objectID</code> — each object key is prefixed by the name of the table it belongs to. It’s a simple and effective way to avoid key collisions and make sure that a request coming from “table1” cannot read the objects in “table2”, for example.</p><p>Now, we have to modify our code to be able to make requests to the new shared table and to do that we wrote a simple “routing” function which gives us the correct key to an object in a shared table:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">getKeyForTableID</span><span class="params">(String key, String tableID)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// if table is shared return the composite key</span></span><br><span class="line">  <span class="keyword">if</span> (isSharedTable(tableID)) &#123;</span><br><span class="line">    <span class="keyword">return</span> tableID + <span class="string">"_"</span> + key;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> key;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So, if we had a read function in our code called <code>readObject(key, table)</code> this will have to be changed to <code>readObject(getKeyForTableID(key, table))</code>. Thus we can not only read from standard tables but also we can read object from our <code>shared</code> table. Finally, if we want to query multiple objects (pages of objects) from <code>shared</code> we do a scan operation on the global index instead of the original table.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">readPageFromSharedTable</span><span class="params">(String tableID, String fromKey, List&lt;Page&lt;Item, QueryOutcome&gt;&gt; results)</span> </span>&#123;</span><br><span class="line">  ValueMap valueMap = <span class="keyword">new</span> ValueMap().withString(<span class="string">":tid"</span>, tableID);</span><br><span class="line">  valueMap.put(<span class="string">":ts"</span>, fromKey);</span><br><span class="line">  Index index = getSharedIndex(tableID);</span><br><span class="line"></span><br><span class="line">  QuerySpec spec = <span class="keyword">new</span> QuerySpec().withMaxPageSize(<span class="number">100</span>).withMaxResultSize(<span class="number">100</span>).</span><br><span class="line">      withKeyConditionExpression(<span class="string">"tableID = :tid and timestamp &gt; :ts"</span>).</span><br><span class="line">      withValueMap(valueMap);</span><br><span class="line"></span><br><span class="line">  Page&lt;Item, QueryOutcome&gt; items = index.query(spec);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (items.hasNextPage()) &#123;</span><br><span class="line">    results.add(items.firstPage());</span><br><span class="line">    <span class="comment">// return last key as a start key to next page</span></span><br><span class="line">    <span class="keyword">return</span> items.getLowLevelResult().getQueryResult().getLastEvaluatedKey().get(<span class="string">"timestamp"</span>).getS();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Alright, we have combined several tables into one, but how is that going to affect our AWS bill at the end of the month? Let’s do some simple calculations. At the time of writing, a table with 1/1 throughput costs <strong>$0.66/month</strong>. This is the minimum cost of a table per month. If we had 100 small tables in the beginning, we’d have to pay <strong>(100 * 0.66) = $66 per month</strong>. That’s a lot, especially if our tables were underutilized. The shared table with a global secondary index would cost a mere <strong>$1.32/month</strong> for the minimum capacity of 1 read/s and 1 write/s. That’s a <em>50x</em> cost reduction — good job!</p><p><em>If you liked this post, you should check out <a href="https://paraio.com" target="_blank" rel="noopener">Para</a> - our backend service for busy developers. Also, chat with us <a href="https://gitter.im/Erudika/para" target="_blank" rel="noopener">on Gitter</a>!</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Amazon’s DynamoDB&lt;/strong&gt; is a fully managed database service running inside the AWS cloud which is super-scalable and fast. It is perfect for write-intensive workflows and low-latency queries. Its main advantages are the adjustable read and write performance and global secondary indexes (GSI).&lt;/p&gt;
&lt;p&gt;We migrated from Cassandra to DynamoDB a while back. This decision was taken mainly because of the tunable performance and also because it’s a managed service and we had one less thing to maintain. Later we found out that global indexes could help us save a lot of extra costs and so we implemented a simple solution, which we call “shared tables”.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="aws" scheme="https://erudika.com/blog/tags/aws/"/>
    
      <category term="dynamodb" scheme="https://erudika.com/blog/tags/dynamodb/"/>
    
      <category term="tips" scheme="https://erudika.com/blog/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>An open source backend for the Internet of Things</title>
    <link href="https://erudika.com/blog/2016/08/12/An-open-source-backend-for-the-Internet-of-Things/"/>
    <id>https://erudika.com/blog/2016/08/12/An-open-source-backend-for-the-Internet-of-Things/</id>
    <published>2016-08-12T08:01:00.000Z</published>
    <updated>2017-01-31T20:16:48.482Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Things</strong> — those small, connected devices are now part of our daily lives. As we transition our focus from mobile to broader IoT development, the need for reliable and open source backend systems increases. There are so many applications for IoT — smart thermostats, air conditioning controllers, DIY home automation systems based on Raspberry Pi and Arduino, to name a few. We were planning to add IoT support to Para for a while now but it was only after a fellow developer’s suggestion that we realized we should’ve done this sooner. </p><a id="more"></a><p><img src="https://erudika.com/assets/img/blogpost_media6.png" alt></p><p>There are several key players in terms of IoT cloud platforms, but we chose to focus on two — <strong>AWS</strong> and <strong>Azure</strong>. In Para <code>1.20.0</code> we’ve implemented basic support for both platforms which allows you to keep your devices in sync between your backend and the cloud. There’s a new object called <code>Thing</code> which holds all the information about your device — the state of the device, the security credentials for the cloud and other important data. When a <code>Thing</code> is created, Para automatically calls the cloud provider and sets it up, returning all the information you need to connect your device to that cloud. It can then start pushing state changes and messages to the cloud containing any sensory data or other data of interest. In the case of AWS, Para would check for state changes on every read request and in the case of Azure it runs a separate thread for listening to cloud-to-device messages and updates <code>Thing</code> objects in the background. If you prefer one of these two approaches, we’d love to hear your feedback. </p><p>Creating things from the Para API is really simple — you only need to configure your access keys for the cloud provider of your choice. Then you make a <code>POST</code> request:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /v1/things</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;RPiThingy&quot;,</span><br><span class="line">  &quot;serviceBroker&quot;: &quot;AWS&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>serviceBroker</code> switches between IoT service providers and can either be “AWS” or “Azure”. The request above will perform several tasks on AWS before it returns, it will:</p><ul><li>Create a device certificate</li><li>Create a device policy and attach it to the certificate above</li><li>Create a new thing (device) and attach it to the certificate above</li></ul><p>Finally, a new <code>Thing</code> object is created within Para. The returned JSON object contains the inlined certificate and private key which should be transferred to the physical device. Once it starts sending data to AWS using the MQTT protocol you can poll for device state changes by reading the <code>Thing</code> object:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /v1/things/myapp:664870213421895680</span><br></pre></td></tr></table></figure><p>AWS have what they call “device shadows” a persistent storage for device state which is useful for remembering what was the last state of the device if it ever got disconnected. Let’s assume that this shadow has been updated by our Raspberry Pi thingy and it set a <code>temp = 24</code> variable. Once we read object like we did above, it gets the latest state from AWS. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: &quot;664870213421895680&quot;,</span><br><span class="line">  &quot;timestamp&quot;: 1468601996535,</span><br><span class="line">  &quot;type&quot;: &quot;thing&quot;,</span><br><span class="line">  &quot;appid&quot;: &quot;myapp&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;RPiThingy&quot;</span><br><span class="line">  &quot;serviceBroker&quot;: &quot;AWS&quot;,</span><br><span class="line">  &quot;deviceState&quot;: &#123;</span><br><span class="line">  &quot;temp&quot;: 24</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If we make a change in our backend and change the <code>Thing</code> to have <code>temp = 26</code> then this change is automatically reflected on AWS and the shadow of the device is also updated.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PATCH /v1/things/myapp:664870213421895680</span><br><span class="line">&#123;</span><br><span class="line">  &quot;deviceState&quot;: &#123;</span><br><span class="line">    &quot;temp&quot;: 26</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Summary-—-getting-started-with-Para-and-AWS-IoT"><a href="#Summary-—-getting-started-with-Para-and-AWS-IoT" class="headerlink" title="Summary — getting started with Para and AWS IoT"></a>Summary — getting started with Para and AWS IoT</h2><ol><li>Get an account from AWS and create a user with permissions to call the IoT API</li><li>Set the <code>para.aws_access_key</code> and <code>para.aws_secret_key</code> properties in your Para config file</li><li>Start the Para instance and create a <code>Thing</code> object through the API as shown above</li><li>Take note of the <code>deviceDetails</code> field returned by this request as it contains certificates for your device</li><li>Use the certificates to set up your device and connect it to AWS IoT</li><li>The <code>deviceState</code> field inside the Para <code>Thing</code> object is synced with the device shadow on AWS on every <code>GET</code> request</li><li>Update the deviceState from the Para API and it will be synced with the device shadow on AWS on every <code>PATCH</code> request.</li></ol><h2 id="Other-changes-since-1-20-and-plans-for-the-next-release"><a href="#Other-changes-since-1-20-and-plans-for-the-next-release" class="headerlink" title="Other changes since 1.20 and plans for the next release"></a>Other changes since <code>1.20</code> and plans for the next release</h2><p>We’ve released quite a few improvements in <code>1.19</code> like the implementation of “join-like” queries using the method <code>findLinkedObjects()</code> this allows you to search for objects within a set of linked objects, in a many-to-many relationship. This feature relies on the <code>nested</code> query in Elasticsearch. </p><p>Para now works with Microsoft accounts so you can authenticate users with valid Windows accounts. Additionally, we’ve added independent social sign in for apps with their own OAuth keys, meaning that each app in Para has its own private settings and these can contain security credentials for Facebook, Twitter, etc. This was not possible before for apps other than the root app. Hence, the new endpoint <code>/v1/_settings</code> was added for updating these new app settings. The full changelog can be found on <a href="https://github.com/Erudika/para/releases" target="_blank" rel="noopener">GitHub</a>.</p><p>For the next release we’re hoping to implement a new Cassandra <code>DAO</code>, which is now overdue. An interesting fact about Para is that it was originally implemented to only run on top of Cassandra as a database layer. This was back in days when Cassandra was below version 1.0 and had no official client library, instead we used the Hector client. Para is now database-agnostic but we really wanted to rewrite the original connector for Cassandra using the official Java drivers. </p><p><em>Have ideas for the next Para release? Chat with us <a href="https://gitter.im/Erudika/para" target="_blank" rel="noopener">on Gitter</a>!</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Things&lt;/strong&gt; — those small, connected devices are now part of our daily lives. As we transition our focus from mobile to broader IoT development, the need for reliable and open source backend systems increases. There are so many applications for IoT — smart thermostats, air conditioning controllers, DIY home automation systems based on Raspberry Pi and Arduino, to name a few. We were planning to add IoT support to Para for a while now but it was only after a fellow developer’s suggestion that we realized we should’ve done this sooner. &lt;/p&gt;
    
    </summary>
    
    
    
      <category term="release" scheme="https://erudika.com/blog/tags/release/"/>
    
      <category term="para" scheme="https://erudika.com/blog/tags/para/"/>
    
      <category term="iot" scheme="https://erudika.com/blog/tags/iot/"/>
    
      <category term="devices" scheme="https://erudika.com/blog/tags/devices/"/>
    
  </entry>
  
  <entry>
    <title>Building a full stack application from scratch with Angular</title>
    <link href="https://erudika.com/blog/2016/06/09/Building-the-stack-from-scratch-with-Angular-2/"/>
    <id>https://erudika.com/blog/2016/06/09/Building-the-stack-from-scratch-with-Angular-2/</id>
    <published>2016-06-09T11:37:12.000Z</published>
    <updated>2019-08-14T21:24:55.195Z</updated>
    
    <content type="html"><![CDATA[<p><strong>UPDATE:</strong> This article and its associated code have been updated for Angular 8.x. The same article is also <a href="http://www.erudika.com/blog/2019/08/14/Building-a-full-stack-application-from-scratch-with-React/" target="_blank" rel="noopener">available for React</a>.</p><p>In this tutorial we’re going to build a simple single-page application with <strong>Angular</strong> (v8 and above). This is intendedfor developers unfamiliar with the new framework or having some experience with AngularJS. First of all, I got<strong>Visual Studio Code</strong> installed on my machine and it’s running on Linux. I chose VS Code because we’ll be working with<strong>TypeScript</strong> mostly and it has great support for it, but you can code in your favourite IDE as well.Originally, the code in this article was based on the excellent Angular 2 Seed project by <a href="https://github.com/mgechev" target="_blank" rel="noopener">Minko Gechev</a>That project is now deprecated in favor of Angular CLI and the code here has been migrated to use the new official buildtool for Angular. You’ll also need to have <strong>Git</strong>, <strong>Node.js</strong> and <strong>npm</strong> installed.</p><a id="more"></a><p><img src="https://erudika.com/assets/img/blogpost_media5.png" alt></p><h2 id="Step-0-frontend"><a href="#Step-0-frontend" class="headerlink" title="Step 0 (frontend)"></a>Step 0 (frontend)</h2><ul><li>Get <a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener">Visual Studio Code</a></li><li>Get <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a></li><li>Get <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js with npm</a></li><li>Install <a href="https://cli.angular.io/" target="_blank" rel="noopener">‘Angular CLI’</a> with <code>npm install -g @angular/cli</code></li><li>Open the project in the VS Code editor</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @angular/cli</span><br><span class="line">ng new angular-para</span><br><span class="line"><span class="built_in">cd</span> angular-para</span><br><span class="line"><span class="comment"># install the project's dependencies</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment"># watches your files and does live reload</span></span><br><span class="line">ng serve</span><br></pre></td></tr></table></figure><p>Next - <strong>the backend</strong>. Here, I could write a simple backend in Node.js and Express but I’m lazy so I chose not to.Instead, I’m going to use <strong>Para</strong> for my backend and I’m not going to write <em>any</em> code on the server. If you arenew to Para, it’s a general-purpose backend framework/server written in Java. It will save me a lot of time and effortbecause it has a nice JSON API for our app to connect to. To run the server you’re going to need a Java runtime.</p><h2 id="Step-0-backend"><a href="#Step-0-backend" class="headerlink" title="Step 0 (backend)"></a>Step 0 (backend)</h2><ul><li>Get <a href="https://jdk.java.net/12/" target="_blank" rel="noopener">Java</a></li><li>Get <a href="https://paraio.org/" target="_blank" rel="noopener">Para</a></li><li>Start the server in a separate terminal:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># run Para</span></span><br><span class="line">java -jar para-x.y.z.jar</span><br></pre></td></tr></table></figure><p>Now, check if Para is running - open your browser and go to <code>http://localhost:8080/v1</code>. You should see a response likethis:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"info"</span> : <span class="string">"Para - a backend for busy developers."</span>,</span><br><span class="line">  <span class="attr">"version"</span> : <span class="string">"x.y.z"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We haven’t got access keys to the server yet, so let’s go ahead and do that, open:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/v1/_setup</span><br></pre></td></tr></table></figure><p>Save the credentials to a file, we’ll need them later to access the backend API.</p><h2 id="Step-1-API-access"><a href="#Step-1-API-access" class="headerlink" title="Step 1 - API access"></a>Step 1 - API access</h2><p>Let’s create an app for storing recipes - a recipe manager. Our goal will be to build just the basic CRUD functionality,without adding extra features like authentication and login pages. By default the backend is secured and only signedrequests are allowed, but for the purpose of this tutorial we’re going to add a new permission to allow all requests tojust one specific resource - <code>/v1/recipes</code>.</p><p>Go to <a href="https://console.paraio.org" target="_blank" rel="noopener">console.paraio.org</a> and enter the credentials that you saved in the beginning. Alsoclick the cog icon to edit the API endpoint and set it to <code>http://localhost:8080</code>. Click ‘Connect’.</p><p>Next, go to ‘App’ on the left and edit the root app called <code>para</code>. You’ll see a section for resource permissions andthere you will write a simple permission definition in JSON:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"*"</span>: &#123;</span><br><span class="line">    <span class="attr">"recipes"</span>: [<span class="string">"*"</span>, <span class="string">"?"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This defines a single permission that allows <code>* - everyone</code> to access <code>/v1/recipes</code> using a list of allowed methods,in this case <code>* - all HTTP methods</code> and <code>? - anonymous access</code> is allowed. Thus, we’re essentially making this resourcepublicly available. Click ‘Save Changes’.</p><p><img src="https://erudika.com/assets/img/rman_1.png" alt></p><h2 id="Step-2-CRUD-recipes"><a href="#Step-2-CRUD-recipes" class="headerlink" title="Step 2 - CRUD recipes"></a>Step 2 - CRUD recipes</h2><p>Let’s create a new frontend component called “home” with the command <code>ng generate component home</code>.Now let’s edit the ‘home’ component under <code>src/app/home</code>. In particular, we want to edit the HTML code in <code>home.component.html</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>My Recipes &amp;nbsp; <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"newRecipeForm()"</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> (<span class="attr">submit</span>)=<span class="string">"search()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"q"</span> <span class="attr">name</span>=<span class="string">"searchText"</span> <span class="attr">placeholder</span>=<span class="string">"Search"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- <span class="doctag">TODO:</span> add box showing "no recipes found" --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let recipe of recipesList; let i = index"</span> <span class="attr">class</span>=<span class="string">"recipe-box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> [<span class="attr">hidden</span>]=<span class="string">"editedRecipes.get(recipe.id) || (!recipe.id &amp;&amp; createMode)"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;recipe.name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> [<span class="attr">innerHTML</span>]=<span class="string">"md2html(recipe.text)"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">href</span>=<span class="string">"#"</span> (<span class="attr">click</span>)=<span class="string">"editRecipe(recipe)"</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">button</span>&gt;</span> &amp;nbsp;</span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> (<span class="attr">click</span>)=<span class="string">"removeRecipe(recipe.id)"</span> <span class="attr">class</span>=<span class="string">"red right"</span>&gt;</span>remove<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> [<span class="attr">hidden</span>]=<span class="string">"(recipe.id || !createMode) &amp;&amp; !editedRecipes.get(recipe.id)"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> (<span class="attr">submit</span>)=<span class="string">"addRecipe(recipe)"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> [(<span class="attr">ngModel</span>)]=<span class="string">"recipe.name"</span> <span class="attr">placeholder</span>=<span class="string">"Title"</span> [<span class="attr">name</span>]=<span class="string">"'name' + i"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">textarea</span> [(<span class="attr">ngModel</span>)]=<span class="string">"recipe.text"</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">cols</span>=<span class="string">"33"</span> <span class="attr">placeholder</span>=<span class="string">"Recipe"</span> [<span class="attr">name</span>]=<span class="string">"'text' + i"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> *<span class="attr">ngIf</span>=<span class="string">"createMode"</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> *<span class="attr">ngIf</span>=<span class="string">"!createMode"</span>&gt;</span>Save<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        &amp;nbsp;</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> (<span class="attr">click</span>)=<span class="string">"closeForm(recipe.id)"</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>I’ve added the “Add” button which shows the form where we can write a recipe (controlled by <code>newRecipeForm()</code>), a textarea,and a close button. Notice how the text value of the “Add” button changes to “Save” when we’re in edit mode. Comingfrom AngularJS, you’ll notice the weird <code>[(ngModel)]</code> syntax - it’s a two-way binding (single brackets is one-way).Similarly, <code>*ngIf</code> is just shorthand for <code>[ngIf]</code>.</p><p>Let’s create a new “core” module and 2 new components inside it - the “toolbar” and “navbar”.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ng generate module core</span><br><span class="line">ng generate component core/toolbar</span><br><span class="line">ng generate component core/navbar</span><br></pre></td></tr></table></figure><p>Also, I chose to set a new title in the header section in <code>src/app/core/toolbar/toolbar.component.html</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Recipe Manager <span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="tag">&lt;<span class="name">small</span>&gt;</span>v&#123;&#123;version&#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"more"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Let’s create a new service to talk to our Para backend and fetch recipes. Let’s call it <code>RecipesService</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng generate service recipe</span><br></pre></td></tr></table></figure><p>The service file should be located in <code>src/app/recipe.service.ts</code>. We’ll modify the file <code>recipe.service.ts</code> to allow foranother parameter <code>text</code> in the <code>add()</code> method. Let’s also add the code for making the <code>POST</code> request to the backend:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; environment <span class="keyword">as</span> Config &#125; <span class="keyword">from</span> <span class="string">'src/environments/environment'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> RecipeService &#123;</span><br><span class="line"><span class="keyword">private</span> appID = <span class="string">'app:myapp'</span>;</span><br><span class="line"><span class="keyword">private</span> RECIPES_RESOURCE = Config.API + <span class="string">'/v1/recipes'</span>;</span><br><span class="line"></span><br><span class="line">add(name: <span class="built_in">string</span>, text: <span class="built_in">string</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!name || !text) &#123; <span class="keyword">return</span> of(<span class="literal">null</span>); &#125;</span><br><span class="line"><span class="keyword">const</span> recipe: <span class="built_in">any</span> = &#123; name: name, text: text &#125;;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.http.post(<span class="keyword">this</span>.RECIPES_RESOURCE, <span class="built_in">JSON</span>.stringify(recipe), <span class="keyword">this</span>.options);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>Config</code> object is actually imported from <code>src/environments/environment.ts</code> where we have a JS object containing allthe configuration properties for our project. That file replaced with <code>environment.prod.ts</code> when we compile the projectfor production use.</p><p>In the code for <code>home.component.ts</code> we’ll add a few fields to manage the recipes. The start of that component should looklike this:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-home'</span>,</span><br><span class="line">  templateUrl: <span class="string">'home.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'home.component.css'</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HomeComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  recipesList: <span class="built_in">Array</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line">  createMode = <span class="literal">false</span>;</span><br><span class="line">  q: <span class="built_in">string</span>;</span><br><span class="line">  editedRecipes: Map&lt;<span class="built_in">string</span>, <span class="built_in">boolean</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> recipeService: RecipeService</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.editedRecipes = <span class="keyword">new</span> Map&lt;<span class="built_in">string</span>, <span class="built_in">boolean</span>&gt;();</span><br><span class="line">    <span class="keyword">this</span>.recipesList = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addRecipe(): <span class="built_in">boolean</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we’re going to focus on that <code>addRecipe()</code> method so let’s implement it:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">addRecipe(recipe: <span class="built_in">any</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.recipeService.add(recipe.name, recipe.text)</span><br><span class="line">.subscribe(<span class="function">(<span class="params">data: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (data) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.createMode) &#123;</span><br><span class="line"><span class="keyword">const</span> first = <span class="keyword">this</span>.recipesList.shift();</span><br><span class="line"><span class="keyword">this</span>.recipesList.unshift(data);</span><br><span class="line"><span class="keyword">this</span>.recipesList.unshift(first);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.recipesList.unshift(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">this</span>.closeForm(recipe.id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s also add the method for listing recipes <code>listRecipes()</code> and call it upon initialization:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ngOnInit() &#123;</span><br><span class="line"><span class="keyword">this</span>.listRecipes();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">listRecipes() &#123;</span><br><span class="line"><span class="keyword">this</span>.recipeService.get()</span><br><span class="line">.subscribe(<span class="function">(<span class="params">data: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.recipesList = data.items;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You’ll notice that in <code>home.component.ts</code>, we subscribe to the <code>Observable</code> returned by<code>recipeService.add()</code> and get back the list of recipes when they arrive.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.recipeService.add(<span class="keyword">this</span>.newName, <span class="keyword">this</span>.newRecipe).subscribe(<span class="function">(<span class="params">data: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// response might be null or empty</span></span><br><span class="line">    <span class="keyword">if</span> (data) &#123;</span><br><span class="line">        <span class="keyword">this</span>.recipesList.unshift(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>In <code>home.component.html</code> we loop over the <code>recipesList</code> of all available recipes, and also a box which appearswhen there are no recipes to show:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"empty-box"</span> *<span class="attr">ngIf</span>=<span class="string">"recipesList &amp;&amp; recipesList.length == 0"</span>&gt;</span></span><br><span class="line">    No recipes to show.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let recipe of recipesList"</span> <span class="attr">class</span>=<span class="string">"recipe-box"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Let’s add the styling for <code>.recipe-box</code> and <code>.empty-box</code> later in <code>home.component.css</code>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.recipe-box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-table;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">30px</span> <span class="number">30px</span> <span class="number">0</span> -<span class="number">7px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#106cc8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.empty-box</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1.5em</span> <span class="number">0</span> <span class="number">1em</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">3em</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> dashed;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In <code>src/styles.css</code> I’ve also added a few more tweaks to the CSS:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span>, <span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#106cc8</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#106cc8</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: none;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(255, 255, 255, 0.87);</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">background-color</span>: <span class="number">#28739e</span>; &#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.small</span> &#123; <span class="attribute">font-size</span>: <span class="number">12px</span>; <span class="attribute">height</span>: <span class="number">30px</span>; &#125;</span><br><span class="line"><span class="selector-class">.red</span> &#123; <span class="attribute">color</span>: indianred; &#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123; <span class="attribute">float</span>: right; &#125;</span><br><span class="line"><span class="selector-class">.center</span> &#123; <span class="attribute">text-align</span>: center; &#125;</span><br></pre></td></tr></table></figure><p><img src="https://erudika.com/assets/img/rman_2.png" alt></p><p>So, we should now we able to add recipes and after we click “Add” the form should be cleared and closed.For this let’s add a couple of methods in <code>home.component.ts</code> - one to initialize the form and one to reset thestate of the form:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">newRecipeForm() &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.createMode) &#123;</span><br><span class="line"><span class="keyword">this</span>.recipesList.unshift(&#123;name: <span class="string">''</span>, text: <span class="string">''</span>&#125;);</span><br><span class="line"><span class="keyword">this</span>.createMode = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">closeForm(recipeId: <span class="built_in">string</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (recipeId) &#123;</span><br><span class="line"><span class="keyword">this</span>.editedRecipes.set(recipeId, <span class="literal">false</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.createMode) &#123;</span><br><span class="line"><span class="keyword">this</span>.recipesList.shift();</span><br><span class="line"><span class="keyword">this</span>.createMode = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://erudika.com/assets/img/rman_3.png" alt></p><p>The variable <code>recipeId</code> will keep the value of the <code>id</code> when a recipe is being edited. When “Save” is clicked this<code>id</code> is passed to the service and the backend so it won’t create a new object, just update an existing one.We’re issuing these requests and we don’t care about the results because we can update the UIinstantly, without having to wait for the request to finish.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">editRecipe(recipe: <span class="built_in">any</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.editedRecipes.set(recipe.id, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">removeRecipe(id: <span class="built_in">string</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.recipeService.remove(id).subscribe();</span><br><span class="line"><span class="keyword">this</span>.recipesList = <span class="keyword">this</span>.recipesList.filter(<span class="function">(<span class="params">el</span>) =&gt;</span> el.id !== id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s also add similar methods in our <code>RecipeService</code> for updating and deleting recipes. The methods <code>editRecipe()</code> and<code>removeRecipe()</code> are relatively straightforward - when editing, we switch to edit mode and we show the form, whenremoving we just filter the array <code>recipesList</code> and we discard the deleted recipe if it matches the <code>id</code>.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">edit(id: <span class="built_in">string</span>, name: <span class="built_in">string</span>, text: <span class="built_in">string</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!id) &#123; <span class="keyword">return</span> of(<span class="literal">null</span>); &#125;</span><br><span class="line"><span class="keyword">const</span> recipe: <span class="built_in">any</span> = &#123; name: name, text: text &#125;;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.http.patch(<span class="keyword">this</span>.RECIPES_RESOURCE + <span class="string">'/'</span> + id, <span class="built_in">JSON</span>.stringify(recipe), <span class="keyword">this</span>.options);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">remove(id: <span class="built_in">string</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!id) &#123; <span class="keyword">return</span> of(<span class="literal">null</span>); &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.http.delete(<span class="keyword">this</span>.RECIPES_RESOURCE + <span class="string">'/'</span> + id, <span class="keyword">this</span>.options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In <code>home.component.ts</code> we’ll modify the code for <code>addRecipe()</code> to also edit a recipe when <code>recipe.id</code> is set.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">addRecipe(recipe: <span class="built_in">any</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (recipe &amp;&amp; recipe.id) &#123;</span><br><span class="line"><span class="keyword">this</span>.recipeService.edit(recipe.id, recipe.name, recipe.text).subscribe();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.recipeService.add(recipe.name, recipe.text)</span><br><span class="line">.subscribe(<span class="function">(<span class="params">data: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (data) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.createMode) &#123;</span><br><span class="line"><span class="keyword">const</span> first = <span class="keyword">this</span>.recipesList.shift();</span><br><span class="line"><span class="keyword">this</span>.recipesList.unshift(data);</span><br><span class="line"><span class="keyword">this</span>.recipesList.unshift(first);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.recipesList.unshift(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.closeForm(recipe.id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://erudika.com/assets/img/rman_4.png" alt></p><p>We can now add, edit and remove recipes but they aren’t very pretty and the formatting of the textis lost. In the next step we’ll make it possible to write the recipe text in Markdown and then render it in HTML.</p><h2 id="Step-3-Markdown-support"><a href="#Step-3-Markdown-support" class="headerlink" title="Step 3 - Markdown support"></a>Step 3 - Markdown support</h2><p>First of all, let’s install <code>showdown</code> - a nice JavaScript parser for Markdown:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install showdown --save</span><br><span class="line">npm install @types/showdown --save-dev</span><br></pre></td></tr></table></figure><p>Then we import it in <code>home.component.ts</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Converter &#125; from &apos;showdown&apos;;</span><br></pre></td></tr></table></figure><p>Finally we’ll implement a simple method called <code>md2html()</code> which will be used in our template.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">md2html(text: <span class="built_in">string</span>): <span class="built_in">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Converter().makeHtml(text || <span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In our HTML template we call it like this:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">innerHTML</span>]=<span class="string">"md2html(recipe.text)"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Now we render the text to HTML on the client and this allows us to write beautiful recipes like this:</p><p><img src="https://erudika.com/assets/img/rman_5.png" alt></p><h2 id="Step-4-Full-text-search"><a href="#Step-4-Full-text-search" class="headerlink" title="Step 4 - Full-text search"></a>Step 4 - Full-text search</h2><p>The final feature left is the recipe search box. We’ll use the built-in full-text search in Para. In <code>recipe.service.ts</code>:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">search(q: <span class="built_in">string</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.http.get(<span class="keyword">this</span>.RECIPES_RESOURCE + <span class="string">'?q='</span> + q, <span class="keyword">this</span>.options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And in <code>home.component.ts</code>:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">search(): <span class="built_in">boolean</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.recipeService.search(<span class="keyword">this</span>.q || <span class="string">'*'</span>).subscribe(<span class="function">(<span class="params">data: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (data.items) &#123;</span><br><span class="line"><span class="keyword">this</span>.recipesList = data.items;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Finally, we add the search box in the template below the heading:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>My Recipes &amp;nbsp; <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"newRecipeForm()"</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> (<span class="attr">submit</span>)=<span class="string">"search()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"q"</span> <span class="attr">name</span>=<span class="string">"searchText"</span> <span class="attr">placeholder</span>=<span class="string">"Search"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>And we’re done! Here’s final result of our <strong>Recipe Manager</strong>(check out <a href="http://albogdano.github.io/angular2-para/" target="_blank" rel="noopener">the live demo</a>):</p><p><img src="https://erudika.com/assets/img/rman_6.png" alt></p><h2 id="Final-touches"><a href="#Final-touches" class="headerlink" title="Final touches"></a>Final touches</h2><p>You can see the result in your browser by running <code>ng serve</code>. Optionally, you can make this web application “progressive”(PWA) by adding the package <code>@angular/pwa</code> with <code>ng add @angular/pwa</code>. This will create a <code>manifest.json</code> and make thepage available offline. Our code now passes the Lighthouse audit with flying colors!</p><p><img src="https://erudika.com/assets/img/rman_7.png" alt></p><p>All that is left is to build the project for production and deploy it:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ng build --prod --base-href /angular2-para/</span><br><span class="line"># git push origin master</span><br></pre></td></tr></table></figure><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Learning Angular takes some time as it introduces a lot of architectural changes and new syntax.Writing in TypeScript feels fresh and more like writing in a modern statically typed language like C# or Java,rather than a dynamic language like JS. The <code>import</code> syntax was a bit hard for me to get used to, especiallywith all the different files I had to navigate through. In general, the experience of writing Angular apps with the helpof the new Angular CLI tool is great - the scaffolding just works, the build process is fast and painless,the TypeScript syntax is clean, the app is well structured and the error messages are clear and understandable.</p><p><strong>Things we did:</strong></p><ul><li>generated a new project from scratch with Angular CLI</li><li>wrote a few fancy AJAX calls to our backend API</li><li>wired a bunch of simple TypeScript code between a component and a service</li><li>wrote some good old HTML and CSS</li><li>imported an external library with npm an typings</li></ul><p><strong>Things we didn’t do:</strong></p><ul><li>didn’t write <em>any</em> backend code for CRUD operations on recipes</li><li>didn’t define a schema for the “recipe” type on the server side</li></ul><p>The complete code for this tutorial is on GitHub at <a href="https://github.com/albogdano/angular2-para" target="_blank" rel="noopener">albogdano/angular2-para</a>.I’ve deployed the same code to GitHub pages as a <a href="http://albogdano.github.io/angular2-para/" target="_blank" rel="noopener">live demo</a> whichis powered by our <a href="https://paraio.com" target="_blank" rel="noopener">cloud-based Para service</a>.</p><p> <em>Have questions or suggestions? Chat with us <a href="https://gitter.im/Erudika/para" target="_blank" rel="noopener">on Gitter</a>!</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; This article and its associated code have been updated for Angular 8.x. The same article is also &lt;a href=&quot;http://www.erudika.com/blog/2019/08/14/Building-a-full-stack-application-from-scratch-with-React/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;available for React&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this tutorial we’re going to build a simple single-page application with &lt;strong&gt;Angular&lt;/strong&gt; (v8 and above). This is intended
for developers unfamiliar with the new framework or having some experience with AngularJS. First of all, I got
&lt;strong&gt;Visual Studio Code&lt;/strong&gt; installed on my machine and it’s running on Linux. I chose VS Code because we’ll be working with
&lt;strong&gt;TypeScript&lt;/strong&gt; mostly and it has great support for it, but you can code in your favourite IDE as well.
Originally, the code in this article was based on the excellent Angular 2 Seed project by &lt;a href=&quot;https://github.com/mgechev&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Minko Gechev&lt;/a&gt;
That project is now deprecated in favor of Angular CLI and the code here has been migrated to use the new official build
tool for Angular. You’ll also need to have &lt;strong&gt;Git&lt;/strong&gt;, &lt;strong&gt;Node.js&lt;/strong&gt; and &lt;strong&gt;npm&lt;/strong&gt; installed.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="para" scheme="https://erudika.com/blog/tags/para/"/>
    
      <category term="angular" scheme="https://erudika.com/blog/tags/angular/"/>
    
      <category term="tutorial" scheme="https://erudika.com/blog/tags/tutorial/"/>
    
      <category term="typescript" scheme="https://erudika.com/blog/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>jPrime roundup, Para client for iOS and Swift</title>
    <link href="https://erudika.com/blog/2016/06/01/jPrime-roundup-Para-client-iOS-Swift/"/>
    <id>https://erudika.com/blog/2016/06/01/jPrime-roundup-Para-client-iOS-Swift/</id>
    <published>2016-06-01T10:40:20.000Z</published>
    <updated>2017-09-30T20:52:49.602Z</updated>
    
    <content type="html"><![CDATA[<p>Last week was <a href="http://jprime.io" target="_blank" rel="noopener">jPrime 2016</a>, the biggest Java conference on the Balkans. It was a huge success — more than 500 visitors, two tracks in two days. The slogan was *”Java - 21 and legally drunk”* and the two main themes were <strong>microservices</strong> and <strong>reactive programming</strong> with RxJava. This was the second year in a row for the conference which is organized by the community, i.e. fellow Java developers from the BGJUG. By being silver sponsors, we made a humble contribution which helped the community organize this great event.</p><a id="more"></a><p><img src="https://erudika.com/assets/img/blogpost_media4.png" alt></p><p>I really liked the talk by Kees Jan Koster where he explained what it is that distracts us from coding and how we can focus on getting things done and not spend too much time in meetings. Later, Hrvoje Crnjak talked about RxJava and how it could be used to make our applications more reactive. And on the second day I really enjoyed the talk on Go by Stoyan Rachev.</p><img src="https://c7.staticflickr.com/8/7737/27107528510_d27d3dca9d_h.jpg" width="1600" height="983" alt><img src="https://c2.staticflickr.com/8/7581/27312437601_f7021cbf45_h.jpg" width="1600" height="1034" alt><img src="https://c4.staticflickr.com/8/7726/26776482963_dccfd6e904_h.jpg" width="1600" height="1060" alt><p>Just before jPrime, we released a <a href="https://github.com/Erudika/para-client-ios" target="_blank" rel="noopener">client library</a> for Para that works with iOS devices, including tvOS and OS X. It is written in Swift and is <a href="http://cocoadocs.org/docsets/ParaClient" target="_blank" rel="noopener">published on CocoaPods</a>. We encountered <a href="https://stackoverflow.com/a/37374778/108758" target="_blank" rel="noopener">a lot of problems with Xcode and CocoaPods</a> along the way - unstable IDE, poor Objective-C interoperability and poor documentation were slowing us down. Personally, I liked Swift and this was my first time using it, but the overall programming experience with Xcode left in me a feeling of unstability and beta-ness. The developer tools for Java and Android are just superior in comparison, and in a way, I’m glad <a href="http://arstechnica.com/tech-policy/2016/05/google-wins-trial-against-oracle-as-jury-finds-android-is-fair-use/" target="_blank" rel="noopener">Java won</a>.</p><p>Now you can build iOS apps that are powered by Para on the backend:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ParaClient</span><br><span class="line"><span class="comment">// avoid using the secret key on mobile devices</span></span><br><span class="line"><span class="keyword">let</span> client = <span class="type">ParaClient</span>(accessKey: <span class="string">"ACCESS_KEY"</span>, secretKey:<span class="string">""</span>)</span><br><span class="line">client.signIn(<span class="string">"facebook"</span>, providerToken: <span class="string">"fb_access_token"</span>, callback: &#123; user <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> user != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// success! user is authenticated, JWT token is saved on the device</span></span><br><span class="line">        <span class="comment">// you can now call the API methods</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Finally, we also updated Para to version <code>1.18.5</code> which includes a number of <a href="https://github.com/Erudika/para/releases" target="_blank" rel="noopener">bug fixes</a>. The release is on Maven Central and you can download the executable <a href="https://github.com/Erudika/para/releases" target="_blank" rel="noopener">WAR binary file from GitHub</a>.</p><p><em>Have questions or suggestions? Chat with us <a href="https://gitter.im/Erudika/para" target="_blank" rel="noopener">on Gitter</a>!</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Last week was &lt;a href=&quot;http://jprime.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jPrime 2016&lt;/a&gt;, the biggest Java conference on the Balkans. It was a huge success — more than 500 visitors, two tracks in two days. The slogan was *”Java - 21 and legally drunk”* and the two main themes were &lt;strong&gt;microservices&lt;/strong&gt; and &lt;strong&gt;reactive programming&lt;/strong&gt; with RxJava. This was the second year in a row for the conference which is organized by the community, i.e. fellow Java developers from the BGJUG. By being silver sponsors, we made a humble contribution which helped the community organize this great event.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="release" scheme="https://erudika.com/blog/tags/release/"/>
    
      <category term="para" scheme="https://erudika.com/blog/tags/para/"/>
    
      <category term="jprime" scheme="https://erudika.com/blog/tags/jprime/"/>
    
      <category term="ios" scheme="https://erudika.com/blog/tags/ios/"/>
    
      <category term="swift" scheme="https://erudika.com/blog/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Para Web Console - the admin UI for your backend</title>
    <link href="https://erudika.com/blog/2016/03/25/Para-Web-Console-the-admin-UI-for-your-backend/"/>
    <id>https://erudika.com/blog/2016/03/25/Para-Web-Console-the-admin-UI-for-your-backend/</id>
    <published>2016-03-24T23:02:02.000Z</published>
    <updated>2017-01-31T20:16:48.486Z</updated>
    
    <content type="html"><![CDATA[<p>We’ve released a simple web management console for Para. It’s open source, client-side only and lets you connectto any of your Para servers and manage your objects easily through the web interface. It’s powered by AngularJS anduses the great libraries <a href="https://github.com/marmelab/ng-admin" target="_blank" rel="noopener">ng-admin</a> and <a href="https://github.com/mgonto/restangular" target="_blank" rel="noopener">Restangular</a>.The console works for both local and remotely deployed servers and you are more than welcome to modify it for your needs.We’d appreciate any <a href="https://github.com/erudika/para-admin-ui" target="_blank" rel="noopener">pull requests on GitHub</a>.</p><a id="more"></a><p><img src="https://erudika.com/assets/img/pwc1.png" alt></p><p>Once you connect to Para with your access keys, you see the dashboard where you see some aggregated information aboutyour app and server. On the left there is a list of object types. These include both core types defined in Java classesand user-defined types created through the API. To create a custom type from the console, go to the “Edit App view”and edit the <code>Datatypes</code> field by adding your own type, then refresh the page and it will appear on the left. Alsoyou can edit the resource permissions for your app.</p><p><img src="https://erudika.com/assets/img/pwc1_p1.png" alt></p><p>All types, except Linker (read-only), support CRUD operations in the web console. You can create and edit objectseasily and you can also do full-text search and browse through all the pages of results. We hope to add moreimprovements to the project soon, like address visualization on a map and automatic configuration of custom fields.</p><p><img src="https://erudika.com/assets/img/pwc1_p2.png" alt></p><p>We’ve also updated Para to v1.18.3 to support the new type of tokens used by the web console. You can now generateJWTs on the client-side and create “super” tokens from your access keys. These tokens give you full-access to theAPI for a limited time, until they expire. They are simple to work with and can be sent as a request header.Other improvements in this version include:</p><ul><li>Added support for anonymous permissions and guest access to the API</li><li>Fixed default permissions to allow users to access their child objects (object created by them)</li><li>Fixed CORS and GZip filters conflicts</li></ul><p>The admin interface is client-side only and your secret key is <em>never</em> sent over the the network. Instead, a JWTaccess token is generated locally and sent to the server on each request (valid for a week).</p><p>We created the web console as a supplementary tool to our paid backend management interface on <a href="https://paraio.com" target="_blank" rel="noopener">paraio.com</a>.It has all the features of the web console and more - backup and restore, simple permission managementand scalability controls. And we offer free accounts for developers!</p><p><em>Have questions or suggestions? Chat with us <a href="https://gitter.im/Erudika/para" target="_blank" rel="noopener">on Gitter</a>!</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We’ve released a simple web management console for Para. It’s open source, client-side only and lets you connect
to any of your Para servers and manage your objects easily through the web interface. It’s powered by AngularJS and
uses the great libraries &lt;a href=&quot;https://github.com/marmelab/ng-admin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ng-admin&lt;/a&gt; and &lt;a href=&quot;https://github.com/mgonto/restangular&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Restangular&lt;/a&gt;.
The console works for both local and remotely deployed servers and you are more than welcome to modify it for your needs.
We’d appreciate any &lt;a href=&quot;https://github.com/erudika/para-admin-ui&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pull requests on GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="para" scheme="https://erudika.com/blog/tags/para/"/>
    
      <category term="angular" scheme="https://erudika.com/blog/tags/angular/"/>
    
      <category term="ng-admin" scheme="https://erudika.com/blog/tags/ng-admin/"/>
    
      <category term="frontend" scheme="https://erudika.com/blog/tags/frontend/"/>
    
  </entry>
  
  <entry>
    <title>Para v1.18 released, new site and jPrime</title>
    <link href="https://erudika.com/blog/2016/03/06/Para-v1-18-released-new-site-and-jPrime/"/>
    <id>https://erudika.com/blog/2016/03/06/Para-v1-18-released-new-site-and-jPrime/</id>
    <published>2016-03-06T21:46:35.000Z</published>
    <updated>2017-01-31T20:16:48.486Z</updated>
    
    <content type="html"><![CDATA[<p>This past month was interesting and quite busy for us - we got valuable feedback and contributions from our clients,fixed many bugs, released the <a href="https://github.com/Erudika/para-client-android" target="_blank" rel="noopener">Android client for Para</a> and a newplugin for MongoDB. The number one request for this version was support for plugins and MongoDB. We’ve also updatedthe documentation of our open source backend framework and redesigned the landing page on<a href="https://paraio.org" target="_blank" rel="noopener">paraio.org</a>. The docs should now look even better on mobile devices with high-DPI displays.</p><a id="more"></a><p><img src="https://erudika.com/assets/img/blogpost_media3.png" alt></p><p>Para <strong>v1.18</strong> supports plugins for the three main components in our framework - <code>DAO</code>, <code>Search</code> and <code>Cache</code>. Thesethree interfaces are the foundation and their implementations define how objects are stored in a database, indexed by a search engine or cached in memory. Now you can create your own plugins that implement the <code>DAO</code>, for example, like we did for MongoDB. To create a plugin, you simply create a new Java project and import <code>para-core</code> using Maven. Then you implement one of the three interfaces above. Finally, put the compiled plugin inside a <code>lib</code> folder relative to the <code>para-x.y.z.war</code>. For more information about plugins, <a href="https://paraio.org/docs/#008-plugins" target="_blank" rel="noopener">refer to the documentation</a>.</p><p>Our <a href="https://github.com/Erudika/para-dao-mongodb" target="_blank" rel="noopener">para-dao-mongodb</a> plugin is the first official plugin for Para andit adds support for MongoDB. It was written by <a href="https://github.com/lucav" target="_blank" rel="noopener">Luca Venturella</a> and works with the latestMongo server v3.2. We plan to add more plugins like this for Cassandra, PostgreSQL and others. By writing your ownplugins you can extend and modify the core functionality of Para and make it work for your scenario and the technologiesyou use. Here are some of the different possible integrations that can work great as plugins:</p><ul><li><strong>databases</strong> (<code>DAO</code>): Cassandra, PostgreSQL, CouchDB, OrientDB</li><li><strong>search systems</strong> (<code>Search</code>): CloudSearch, Solr, Algolia</li><li><strong>caches</strong> (<code>Cache</code>): Memcached, Redis, Ehcache, Infinispan</li></ul><p>In <strong>v1.18</strong> we also improved the permissions API by allowing developers to add permissions on specific objects by <code>id</code>.The following code, for example, allows a user with id of <code>user1</code> to delete a specific <code>Post</code> object:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paraClient.grantResourcePermission(<span class="string">"user1"</span>, <span class="string">"posts/123"</span>, [<span class="string">"DELETE"</span>]);</span><br></pre></td></tr></table></figure><p>In addition to this, we added special flags to every <code>ParaObject</code> that control persistence, indexing and caching operations.These flags are in the form of boolean properties and give you a fine-grained control over every object. You can nowcreate transient objects that only live in memory (<code>stored: false</code>, <code>indexed: false</code>, <code>cached: true</code>), or objects thatwill never be cached (<code>stored: true</code>, <code>indexed: true</code>, <code>cached: false</code>).</p><p>The plan for the next few weeks is to add more integrations and a basic web UI, as requested by some of our fellowdevelopers. We’ll be focusing on making Para work with <a href="https://github.com/marmelab/ng-admin" target="_blank" rel="noopener">ng-admin</a> and<a href="https://github.com/mgonto/restangular" target="_blank" rel="noopener">Restangular</a>, as well as, <strong>iOS</strong>.And even though we regret the recent news of <a href="http://blog.parse.com/announcements/moving-on/" target="_blank" rel="noopener">Parse shutting down</a>, we hopethat more web and mobile developers will find <a href="https://paraio.com" target="_blank" rel="noopener">Para</a> useful and a good alternative to the Parse service.</p><h2 id="Meet-us-at-the-jPrime-conference"><a href="#Meet-us-at-the-jPrime-conference" class="headerlink" title="Meet us at the jPrime conference"></a>Meet us at the jPrime conference</h2><p>We’ll be sponsoring <a href="http://jprime.io/" target="_blank" rel="noopener">jPrime</a> - a local conference with talks on Java, the JVM, mobile, web and bestpractices, which will be held on <strong>May 26-27th, 2016</strong> in Sofia, Bulgaria. It’s run by the<a href="https://jug.bg/en/" target="_blank" rel="noopener">Bulgarian Java User Group</a> and backed by the biggest software companies in the city. If you’re inthe area and into Java, you should definitely come to jPrime. Send us an email and we’ll arrange for you some Parastickers on the day of the conference.</p><p><em>You can now chat with us <a href="https://gitter.im/Erudika/para" target="_blank" rel="noopener">on Gitter</a>!</em></p><p><small style="color: #aaa;">Mongo, MongoDB, and the MongoDB leaf logo are registered trademarks of MongoDB, Inc.</small></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This past month was interesting and quite busy for us - we got valuable feedback and contributions from our clients,
fixed many bugs, released the &lt;a href=&quot;https://github.com/Erudika/para-client-android&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android client for Para&lt;/a&gt; and a new
plugin for MongoDB. The number one request for this version was support for plugins and MongoDB. We’ve also updated
the documentation of our open source backend framework and redesigned the landing page on
&lt;a href=&quot;https://paraio.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;paraio.org&lt;/a&gt;. The docs should now look even better on mobile devices with high-DPI displays.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="release" scheme="https://erudika.com/blog/tags/release/"/>
    
      <category term="para" scheme="https://erudika.com/blog/tags/para/"/>
    
      <category term="mongodb" scheme="https://erudika.com/blog/tags/mongodb/"/>
    
      <category term="jprime" scheme="https://erudika.com/blog/tags/jprime/"/>
    
  </entry>
  
  <entry>
    <title>Para v1.17 released</title>
    <link href="https://erudika.com/blog/2016/01/05/para-1-17-released/"/>
    <id>https://erudika.com/blog/2016/01/05/para-1-17-released/</id>
    <published>2016-01-05T16:20:27.000Z</published>
    <updated>2017-09-30T20:53:28.901Z</updated>
    
    <content type="html"><![CDATA[<p>We’re happy to announce the release of Para v1.17. Last week we pushed the new version to Maven and now it’s alsodeployed on <a href="https://paraio.com" target="_blank" rel="noopener">ParaIO.com</a>, our hosted backend service.</p><a id="more"></a><p>We’ve worked hard during the holidays to bring you several new features that will enable you to integrate Para inprojects that are client-side only like static web pages or mobile applications.</p><p>Here are all the new features in Para v1.17:</p><!--Added JSON Web Tokens supportAdded methods to grant and revoke permissions for usersFixed Maven's JAR and WAR assembly - there's a single 'fat' executable WAR nowUpdated Elasticsearch to v2.1.1Updated design & added features to web console--><h2 id="JSON-Web-Tokens-support"><a href="#JSON-Web-Tokens-support" class="headerlink" title="JSON Web Tokens support"></a>JSON Web Tokens support</h2><p><img src="https://erudika.com/assets/img/blogpost_media2.png" alt></p><p><a href="https://jwt.io/" target="_blank" rel="noopener">JSON Web Tokens</a> are a new standard for authenticating clients and users. Think of them as‘Cookies 2.0’. They are simply a signed JSON object containing some data about the authenticated user. The cool thingabout JWTs is that they are stateless and can be stored anywhere - cookies, local storage, memory, etc. They can securelystore information and claims about the user and that information is signed and cannot be tampered with.</p><p>Originally, Para supported only cookies and allowed users to sign in only to the server running Para.This was quite limiting. Now with JWTs users can be authenticated and created per app(see <a href="https://paraio.org/docs/#011-apps" target="_blank" rel="noopener">the docs for apps</a>) through the API.Cookies are still supported but using web tokens is recommended. For example, to sign in a user withFacebook you have to make a request like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /jwt_auth</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"appid"</span>: <span class="string">"app:myapp"</span>,</span><br><span class="line">  <span class="string">"provider"</span>: <span class="string">"facebook"</span>,</span><br><span class="line">  <span class="string">"token"</span>: <span class="string">"eyJhbGciOiJIUzI1NiJ9.eWIiO..."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The token above is a Facebook access token which is exchanged for a Para access token in the form of JWT.If that request succeeds, the access token for Para is returned and that user is now authenticated with <code>app:myapp</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"jwt"</span>: &#123;</span><br><span class="line">    <span class="string">"access_token"</span>: <span class="string">"eyJhbGciOiJIUzI1NiJ9.eyJ..."</span>,</span><br><span class="line">    <span class="string">"expires"</span>: <span class="number">1450137214490</span>,</span><br><span class="line">    <span class="string">"refresh"</span>: <span class="number">1450137216490</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"user"</span>: &#123;</span><br><span class="line">    <span class="string">"id"</span>:<span class="string">"user1"</span>,</span><br><span class="line">    <span class="string">"timestamp"</span>: <span class="number">1399721289987</span>,</span><br><span class="line">    <span class="string">"type"</span>:<span class="string">"user"</span>,</span><br><span class="line">    <span class="string">"appid"</span>:<span class="string">"myapp"</span>,</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That’s it - there’s no need to register the user. And this request can come from any client not just the backend.An good use case would be an AngularJS app running on its own as a static single page app (SPA). The frontend code woulduse our JavaScript client library to call <code>signIn()</code> to the Para backend server. Another use case could be a mobile apprunning native Android code. The app’s code, even though compiled, is not trusted and thus must not contain anyAPI access credentials like a <code>secret_key</code> for Para. In this case JWT is ideal because it gives that app (untrusted client)temporary access to the API. Para access tokens are valid for one week, by default.</p><p>Special thanks to the guys at <a href="https://connect2id.com/products/nimbus-jose-jwt" target="_blank" rel="noopener">Connect2ID</a> for their excellent JWTlibrary for Java which we use in Para.</p><h2 id="Resource-permissions"><a href="#Resource-permissions" class="headerlink" title="Resource permissions"></a>Resource permissions</h2><p>Soon after we decided to add JWT support, we realized that once a user has been authenticated with an app we need tospecify what that user can do, so we implemented basic resource permissions. By default users are not trusted and everynew app has zero permissions - the default policy is <code>deny all</code>. This is in contrast to the normal API access using a<code>secret_key</code> for apps, in which case apps have full permissions and privileged access.</p><p>Resource permissions affect only users with JWT tokens and are stored in each app object. A permission has three parts -a <code>subject_id</code>, a <code>resource_name</code> and a list of <code>methods</code>. It looks like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"user2"</span>: &#123;</span><br><span class="line">    <span class="string">"posts"</span>: [<span class="string">"GET"</span>, <span class="string">"POST"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This gives a subject with id <code>user2</code> permissions to access resource <code>posts</code> using HTTP methods <code>GET</code> and <code>POST</code> only.The <code>posts</code> resource is just an example an is part of the API and is located at <code>/v1/posts</code>. Wildcards <code>*</code> are alsosupported. So the following permission would give everyone full access to all resources for a given app:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"*"</span>: &#123;</span><br><span class="line">    <span class="string">"*"</span>: [<span class="string">"*"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Permissions can be granted and revoked through the API. There’s also a method for checking permissions:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /v1/_permissions/&#123;subjectid&#125;/&#123;resource&#125;/&#123;method&#125;</span><br></pre></td></tr></table></figure><h2 id="Support-for-Elasticsearch-2-x"><a href="#Support-for-Elasticsearch-2-x" class="headerlink" title="Support for Elasticsearch 2.x"></a>Support for Elasticsearch 2.x</h2><p>Elasticseach is a key component of the Para backend server and we use it since version 0.13. With version 2.0 come manynew features and changes. We’ve modified and tested the code to be compatible with the new version.</p><p>You can <a href="https://github.com/Erudika/para/releases/" target="_blank" rel="noopener">download the latest WAR file from GitHub</a>.To run it just type <code>java -jar para-war.war</code> and it will start.</p><p>** We hope you will like the new features and feel free to try Para online at <a href="https://paraio.com" target="_blank" rel="noopener">paraio.com</a>.No need to install anything and it’s free.**</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We’re happy to announce the release of Para v1.17. Last week we pushed the new version to Maven and now it’s also
deployed on &lt;a href=&quot;https://paraio.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ParaIO.com&lt;/a&gt;, our hosted backend service.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="release" scheme="https://erudika.com/blog/tags/release/"/>
    
      <category term="para" scheme="https://erudika.com/blog/tags/para/"/>
    
      <category term="backend" scheme="https://erudika.com/blog/tags/backend/"/>
    
  </entry>
  
  <entry>
    <title>Modern backend (BaaS) frameworks - an overview of Usergrid, LoopBack, Para, BaasBox, Deployd and Telepat</title>
    <link href="https://erudika.com/blog/2015/10/21/backend-frameworks-usergrid-loopback-para-baasbox-deployd-telepat/"/>
    <id>https://erudika.com/blog/2015/10/21/backend-frameworks-usergrid-loopback-para-baasbox-deployd-telepat/</id>
    <published>2015-10-21T11:17:19.000Z</published>
    <updated>2020-02-25T12:00:38.093Z</updated>
    
    <content type="html"><![CDATA[<p>Let’s compare some modern open source backend frameworks that are available today.These frameworks handle the server-side operations of your website or app. Developers use them to build anditerate on products faster than ever before by focusing on the “fun” part - the frontend (client-side).This blog post will be a comparison between open source frameworks only and does not aim to cover all backendservices on the market.</p><a id="more"></a><p>The communication between your front-end code and the backend is usually done through HTTP(S) and the data is usuallyin the form of JSON objects that are sent back and forth. The details about the whole process should be well documentedand part of the REST API documentation.</p><p>So why use a backend framework instead of writing my own? The main good reason is that these frameworks are packagedas reusable components and are tried and tested by many developers. So instead of maintaining another piece of code -the one you wrote yourself - you can use a package that’s already out there and maintained for you.</p><p>Some BaaS frameworks are designed with focus on mobile app development (mBaaS) and some are more generic for buildinganything from websites to desktop software or games. The ones that target mobile apps usually have features likerealtime push, notifications support and client libraries for Android and iOS. We’ll cover both types of frameworks here.</p><h2 id="UserGrid"><a href="#UserGrid" class="headerlink" title="UserGrid - "></a><a href="http://usergrid.apache.org" target="_blank" rel="noopener">UserGrid</a> - <a href="https://github.com/apache/usergrid" target="_blank" rel="noopener"><i class="fa fa-github-square"></i></a></h2><img src="/assets/img/usergrid.png"><p><strong>Multitenant:</strong> yes <br><strong>Language:</strong> Java <br><strong>Database:</strong> Cassandra <br><strong>Documentation:</strong> 8/10 <br><strong>Client libraries:</strong> Android, iOS, JavaScript, Ruby, Java, .NET, PHP <br><strong>Status:</strong> <i class="fa fa-warning"></i> Unmaintained (latest release is from 2016)</p><p>Usergrid is an Apache backend-as-a-service project built with Java. It’s been around since 2011 and is activelydeveloped and maintained. The new version 2.0 is yet to be released and will require both Cassandra and Elasticsearchin addition to a queue system like AWS SQS.</p><p>The project is very well documented but getting started involves quite a few steps. First you need to install Cassandraand a servlet container like Tomcat. Then you deploy the WAR file to Tomcat and call a special URL to create a superuseraccount which gives you access to the web-based console.</p><p>The API allows you to create and run multiple apps, which is a good thing because you might want to have a couple ofapps sharing the same backend and this also makes deployment easier. You also get all the basic CRUD functionality forworking with collections and entities (JSON objects). There are several built-in entity types like <code>user</code>, <code>group</code> and<code>application</code>, for example. They all have <code>type</code> and <code>uuid</code> properties and the latter is an actual UUID string. Basicentity relationships are also supported. Usergrid has good support for user and file management and has a simpledata model.</p><p>Authentication is implemented through OAuth 2.0 and it makes a distinction between user and app roles. Social loginis supported but it appears that only Facebook login works out-of-the-box. Other extra features include geolocationqueries and push notifications (in v2.0).</p><p>Usergrid is an excellent choice if you are building a mobile application or an enterprise-grade backend service inyour organization. It is used in production by quite a few companies.</p><h2 id="LoopBack"><a href="#LoopBack" class="headerlink" title="LoopBack - "></a><a href="http://loopback.io" target="_blank" rel="noopener">LoopBack</a> - <a href="https://github.com/strongloop/loopback" target="_blank" rel="noopener"><i class="fa fa-github-square"></i></a></h2><img src="/assets/img/loopback.png"><p><strong>Multitenant:</strong> no <br><strong>Language:</strong> JavaScript <br><strong>Database:</strong> agnostic <br><strong>Documentation:</strong> 9/10 <br><strong>Client libraries:</strong> Android/Java, iOS, JavaScript <br><strong>Status:</strong> Active</p><p>LoopBack is a Node.js API framework by StrongLoop, part of IBM. It’s been around since 2013 and is actively developedand has great commercial support. It is focused on REST API development and provides a visual editor for editing anddeploying apps. Mobile app developers will love the Android and iOS SDKs and the push system.</p><p>The developer docs are extensive and clear but sometimes slow to navigate. Getting started is easy and there’s aYeaoman-based scaffolding tool for generating new project skeletons. Developers have a great choice of databaseconnectors for all major SQL databases and MongoDB. For development you can also use an in-memory db.</p><p>The flexibility of JavaScript is great for quickly developing apps with less boilerplate code. LoopBack helpswith that further by providing a handy model generator for building your classes quickly. These can be validatedwith the built-in validation methods. Entity relationships are very well supported. The security model is complexwith user roles, principals and ACLs.</p><p>Basic user authentication is part of the core and third-party login support can be implemented using Passportmodules. There’s also a module for OAuth. Geolocation, push and file services are built-in. For anything elsethere’s <code>npm</code> and tons of modules on GitHub.</p><p>LoopBack is great for REST API service generation and very rapid prototyping. Developers can get up and running inminutes by building a custom API using the given CLI tool. LoopBack is a very good fit for all projects written inJavaScript.</p><h2 id="Para"><a href="#Para" class="headerlink" title="Para - "></a><a href="https://paraio.com" target="_blank" rel="noopener">Para</a> - <a href="https://github.com/Erudika/para" target="_blank" rel="noopener"><i class="fa fa-github-square"></i></a></h2><img src="/assets/img/paraio.png" style="border: 1px solid #CCCCCC"><p><strong>Multitenant:</strong> yes <br><strong>Language:</strong> Java <br><strong>Database:</strong> agnostic <br><strong>Documentation:</strong> 9/10 <br><strong>Client libraries:</strong> Java, JavaScript, .NET, PHP, Python, Android, iOS <br><strong>Status:</strong> Active</p><p>Para is our own little backend framework. It is powered by Java and was released in early 2014. Out of the box, Paraintegrates with Elasticsearch and DynamoDB and Hazelcast but developers are not limited to using these defaults.The design is flexible enough so that anyone can implement the interfaces for search, persistence and caching functionality.Apart from DynamoDB, we have connectors for <a href="https://github.com/Erudika/para-dao-mongodb" target="_blank" rel="noopener">MongoDB</a> and<a href="https://github.com/Erudika/para-dao-cassandra" target="_blank" rel="noopener">Cassandra</a>. We’re planning to include support for PostgreSQL as well.</p><p>Para is focused on simplicity and flexibility and it can host multiple apps on a single server. Although you can useit to power your mobile backend, we wanted to make the framework simpler by providing the core functionality and thuswe created a general-purpose BaaS. Some of our clients are using it as an API server for their Angular frontend, whileothers use it as an alternative to Parse for their mobile development.</p><p>The <a href="https://paraio.org/docs" target="_blank" rel="noopener">documentation</a> is great, contained in a single webpage for easy navigation and API methodsare described clearly. Getting started is pretty easy - download the executable WAR package and run it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar para-x.y.z.war</span><br><span class="line">$ curl localhost:8080/v1/_setup</span><br></pre></td></tr></table></figure><p>This will give you the keys needed for making authenticated requests to the server using any of our API clients.If you wish to integrate Para with your own code, there’s a package on Maven central - just search for <code>para-server</code>.The WAR file can also be deployed to inside a servlet container like Tomcat.</p><p>The core API consists of three main interfaces for searching, storing and caching object. Implement those and youhave your own custom server. The data model is simple and all classes implement the <code>ParaObject</code> interface. This givesthem some basic properties like <code>id</code>, <code>type</code> and <code>name</code>. Entities can link to other entities by forming one-to-one,one-to-many and many-to-many relationships. Basic constraint checkers, such as <code>required</code>, <code>min</code>, <code>max</code>, <code>regexp</code>,can be used to validate object properties. Full-text search is enabled by default for all objects.</p><p>Authentication between clients and the server is not based on OAuth, <a href="http://hueniverse.com/2012/07/26/oauth-2-0-and-the-road-to-hell/" target="_blank" rel="noopener">intentionally</a>.Instead we implement the simple and robust AWS Signature 4 algorithm for signed requests. User management, fine-grainedpermissions and support for JSON Web Tokens are available since version 1.17. Para also has built-in support for third-partyauthentication with Facebook, Twitter, Google, GitHub, LinkedIn, Microsoft, Slack, as well as any OAuth 2.0 server.It also supports LDAP, Active Directory and SAML.</p><p>Para is a good choice if you are building a cloud-based web service and it’s great for rapid prototyping.It’s an easy-to-use and flexible platform that scales well. A backend for busy developers.</p><h2 id="BaasBox"><a href="#BaasBox" class="headerlink" title="BaasBox - "></a>BaasBox - <a href="https://github.com/baasbox/baasbox" target="_blank" rel="noopener"><i class="fa fa-github-square"></i></a></h2><img src="/assets/img/baasbox.png"><p><strong>Multitenant:</strong> yes, <a href="http://www.baasbox.com/the-importance-of-managing-multiple-apps-with-one-backend" target="_blank" rel="noopener">since v0.8.4</a> <br><strong>Language:</strong> Java <br><strong>Database:</strong> OrientDB <br><strong>Documentation:</strong> 8/10 <br><strong>Client libraries:</strong> Android/Java, iOS, JavaScript <br><strong>Status:</strong> <i class="fa fa-warning"></i> Unmaintained (last commit on GitHub was in Dec. 2015.)</p><p>BaasBox is another mBaaS with a nice web-based admin console. It supports everything a mobile developer wouldneed to run a backend server. It’s been around since early 2013. It provides good support for Android and iOSclients and JavaScript.</p><p>The docs are very nice and detailed, very easy to navigate. Getting started is very easy - unzip the file and runthe Bash/bat script and you open up the console on <code>localhost:9000/console</code>.  The server is running on top of OrientDBwhich is sort of a hybrid database and has a lot of cool features.</p><p>BaasBox is easy to learn and has a nice REST API that speaks JSON. It’s got full support for CRUD operations on objectsand collections of objects and also allows you to link them in one-to-many or many-to-many relationships. Socialfeatures are excellent - you have social login, friendship/followers API and user management. Other features includefiles and assets API, push notifications and a plugin system.</p><h2 id="Deployd"><a href="#Deployd" class="headerlink" title="Deployd - "></a><a href="http://deployd.com" target="_blank" rel="noopener">Deployd</a> - <a href="https://github.com/deployd/deployd" target="_blank" rel="noopener"><i class="fa fa-github-square"></i></a></h2><img src="/assets/img/deployd.png" style="border: 1px solid #CCCCCC"><p><strong>Multitenant:</strong> no <br><strong>Language:</strong> JavaScript <br><strong>Database:</strong> MongoDB <br><strong>Documentation:</strong> 6/10 <br><strong>Client libraries:</strong> none <br><strong>Status:</strong> <i class="fa fa-warning"></i> Unmaintained (last release was in April 2019)</p><p>Deployd is an API building platform for Node.js and runs on top of MongoDB. It’s been around since 2012. The coolthing about it is its web dashboard and the CLI tool called <code>dpd</code>. The framework, it seems, was designed to be usedas part of your project only, i.e. not as a standalone external API server, and has no client libraries available(tell me if I’m wrong!).</p><p>The project is well documented and has plenty of examples and code. They have dedicated installers for Windows and Macthat will help you get started. To create a new project you run <code>$ dpd create my-app</code> and then start the serverwith <code>dpd -d</code>. That’s it.</p><p>Deployd plays well with other JavaScript frameworks like AngularJS and Backbone.js. It has great support forcollections (plain old JS objects) and events. Events can be emitted and processed easily. User management isbuilt-in. Other functionality like social login support is provided by third-party modules.</p><h2 id="Telepat"><a href="#Telepat" class="headerlink" title="Telepat - "></a><a href="https://telepat.io" target="_blank" rel="noopener">Telepat</a> - <a href="https://github.com/telepat-io/telepat-api" target="_blank" rel="noopener"><i class="fa fa-github-square"></i></a></h2><img src="/assets/img/telepat.png"><p><strong>Multitenant:</strong> yes <br><strong>Language:</strong> JavaScript <br><strong>Database:</strong> agnostic <br><strong>Documentation:</strong>  6/10 <br><strong>Client libraries:</strong> Android, iOS, JavaScript <br><strong>Status:</strong> <i class="fa fa-warning"></i> Unmaintained (last commit was in 2017)</p><p>Telepat is the youngest framework of the bunch. It’s a realtime data sync solution for mobile and other applications.It’s fairly new -  first released in 2015. The framework is focused on realtime push and flexibility. It’s databaseagnostic but seems to be designed to work with NoSQL databases like Couchbase. Search isimplemented on top of Elasticsearch.</p><p>The documentation is a work in progress but looks great. The early stage of the project means that we shouldexpect some changes to the API. Getting started requires you to launch Elasticsearch, Redis and Kafka serversfirst but they provide a nice Docker package that will help you with that.</p><p>The API is simple with CRUD methods for users and applications. User management is supported and authentication isimplemented with passwords and tokens.</p><p>Telepat is really new but shows a lot of potential. Lots of new features are planned and others are almost finishedlike push notifications. It’s well worth checking out especially if you’re building realtime apps.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>We’ve shown how developers can leverage open source backend frameworks to accelerate time-to-market and enhancetheir products’ security and scalability. While some frameworks cater to mobile developers and make very specificchoices in terms of technology stack, other try to have broader use cases and be database-agnostic.</p><p>In order to decide which BaaS package is best for your project, start by defining its scope and platform - is itgoing to be a mobile app or a website, for example. Then choose the framework that has the best documentation andclient library for your specific platform and language - C#, Java, Javascript, etc. Finally get the code and run itlocally on your development machine and give it a try.</p><p>Happy coding!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Let’s compare some modern open source backend frameworks that are available today.
These frameworks handle the server-side operations of your website or app. Developers use them to build and
iterate on products faster than ever before by focusing on the “fun” part - the frontend (client-side).
This blog post will be a comparison between open source frameworks only and does not aim to cover all backend
services on the market.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="para" scheme="https://erudika.com/blog/tags/para/"/>
    
      <category term="backend" scheme="https://erudika.com/blog/tags/backend/"/>
    
      <category term="baas" scheme="https://erudika.com/blog/tags/baas/"/>
    
      <category term="frameworks" scheme="https://erudika.com/blog/tags/frameworks/"/>
    
      <category term="API" scheme="https://erudika.com/blog/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>Hello World!</title>
    <link href="https://erudika.com/blog/2015/10/16/hello-world/"/>
    <id>https://erudika.com/blog/2015/10/16/hello-world/</id>
    <published>2015-10-15T21:00:00.000Z</published>
    <updated>2017-01-31T20:16:48.494Z</updated>
    
    <content type="html"><![CDATA[<p>Hey there! We are Erudika and this is our blog. Here, we’ll share information about our current projects anddevelopments. You can follow us on Twitter as well - <a href="https://twitter.com/erudika" target="_blank" rel="noopener">@erudika</a>, or fork us on<a href="https://github.com/erudika" target="_blank" rel="noopener">GitHub</a>.</p><p>We’re busy developing and running our own backend SaaS called Para (<a href="https://paraio.com" target="_blank" rel="noopener">https://paraio.com</a>). If you are a developerlooking for a simple and scalable backend service, make sure you follow us and try our developer plan - it’s free!</p><a id="more"></a><blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr"><a href="http://t.co/4ybIZHeniM" target="_blank" rel="noopener">http://t.co/4ybIZHeniM</a>is live! Our backend service is in public beta. We&#39;ve got API clients for JavaScript, Java &amp; PHP + freedev accounts!</p>&mdash; Para (@para_io) <a href="https://twitter.com/para_io/status/616873230599647232" target="_blank" rel="noopener">July 3, 2015</a></blockquote><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hey there! We are Erudika and this is our blog. Here, we’ll share information about our current projects and
developments. You can follow us on Twitter as well - &lt;a href=&quot;https://twitter.com/erudika&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@erudika&lt;/a&gt;, or fork us on
&lt;a href=&quot;https://github.com/erudika&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We’re busy developing and running our own backend SaaS called Para (&lt;a href=&quot;https://paraio.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://paraio.com&lt;/a&gt;). If you are a developer
looking for a simple and scalable backend service, make sure you follow us and try our developer plan - it’s free!&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="general" scheme="https://erudika.com/blog/tags/general/"/>
    
  </entry>
  
</feed>
